{
  "hash": "1e623e38acbdc69669eeba0fad8b739c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Flights Data Transformation Example\nsubtitle: Skeleton for the scrolly-telling project\norder: 2\nformat:\n  closeread-html:\n    cr-section:\n      layout: overlay-left\n    cr-style:\n      narrative-background-color-overlay: transparent\n      narrative-background-color-sidebar: transparent\n      section-background-color: transparent\n      narrative-text-color-overlay: black\nknitr:\n  opts_chunk: \n    dev.args:\n      bg: transparent\ncomments:\n  hypothesis: true\n---\n\n**Adapted from sample document from <https://closeread.dev/gallery/demos/build-up-plots/>**\n\n**Weather data from: <https://www.wunderground.com/history/monthly/us/nc/durham/KRDU/date/2023-11>**\n\n\n::: {.cell}\n\n:::\n\n\n# Recreating the dataframe used in the ggplot story\n\nStarting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the **ggplot closeread story**.\n\n::::{.cr-section}\n\nWe start by loading the `tidyverse` package, which contains the `ggplot2` and `dplyr` packages we need. [@cr-dplyr-1]{highlight=\"1\"}\n\n:::{#cr-dplyr-1}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n:::\n\nWe then load the data frame `flights`. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns. [@cr-dplyr-2]{highlight=\"2\"}\n\n:::{#cr-dplyr-2}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nflights <- read_csv(here::here(\"closereads\", \"data\", \"rdu-flights-23.csv\"))\n\nflights # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n:::\n\nWe use the `filter()` function to retain only those rows in the data frame where `Origin` is \"RDU\", `DestState` is either \"NC\" or \"CA\", and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023. Looking at the tibble, we notice that the number of rows is reduced to 368. We can see that the `year` column now only contains **2023**, and the `month` column only contains **11**. The filtering is also reflected in the `flight_date` column.  [@cr-dplyr-3]{highlight=\"4-8\"}\n\n:::{#cr-dplyr-3}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n:::\n\nWe want to select the variables that are used in the data visualization: `dep_delay`, `arr_delay`, `dest_state`, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6. [@cr-dplyr-4]{highlight=\"9-16\"}\n\n:::{#cr-dplyr-4}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay dest_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>     \n 1 2023-11-01  LAX   AA                       -2         1 CA        \n 2 2023-11-02  LAX   AA                       -7       -22 CA        \n 3 2023-11-03  LAX   AA                       -4       -29 CA        \n 4 2023-11-04  LAX   AA                       -8       -27 CA        \n 5 2023-11-25  CLT   AA                       -4         3 NC        \n 6 2023-11-26  CLT   AA                       18        23 NC        \n 7 2023-11-01  CLT   AA                       -7        -8 NC        \n 8 2023-11-02  CLT   AA                       -7        -9 NC        \n 9 2023-11-03  CLT   AA                       47        29 NC        \n10 2023-11-04  CLT   AA                       19         5 NC        \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n\nWe can rename the variable `dest_state` to \"destination_state\" for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed. [@cr-dplyr-5]{highlight=\"17-19\"}\n\n:::{#cr-dplyr-5}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    \"destination_state\" = dest_state\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, `|>`. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that's easy to read and manage.  [@cr-dplyr]{highlight=\"3-19\"}\n\n:::{#cr-dplyr}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    \"destination_state\" = dest_state\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n::::\n\n# Other functions: `arrange`, `relocate`\n\nIn the following section, we build on top of the current dataset and explore the utilization of two additional **dplyr** functions: `arrange` and `relocate.` `arrange` is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, `relocate` is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.\n\n::::{.cr-section}\n\nThe `relocate` function is being used here to adjust the position of the `destination_state` column within the dataframe. By specifying `.before = dep_delay`, the function moves the `destination_state` column to a position immediately before the `dep_delay` column. [@cr-additional-fn-1]{highlight=\"20-22\"}\n\n:::{#cr-additional-fn-1}\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    \"destination_state\" = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  LAX   AA                CA                       -2         1\n 2 2023-11-02  LAX   AA                CA                       -7       -22\n 3 2023-11-03  LAX   AA                CA                       -4       -29\n 4 2023-11-04  LAX   AA                CA                       -8       -27\n 5 2023-11-25  CLT   AA                NC                       -4         3\n 6 2023-11-26  CLT   AA                NC                       18        23\n 7 2023-11-01  CLT   AA                NC                       -7        -8\n 8 2023-11-02  CLT   AA                NC                       -7        -9\n 9 2023-11-03  CLT   AA                NC                       47        29\n10 2023-11-04  CLT   AA                NC                       19         5\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n\nThe `arrange` function is then utilized to sort the dataframe based on the `dep_delay` column in descending order. By using `desc(dep_delay)`, it ensures that the entries with the longest departure delays are listed at the top of the data frame. [@cr-additional-fn-2]{highlight=\"23-25\"}\n\n:::{#cr-additional-fn-2}\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    \"destination_state\" = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  ) |>\n  arrange(\n    desc(dep_delay)\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-09  LAX   AA                CA                      209       215\n 2 2023-11-19  CLT   AA                NC                      174       166\n 3 2023-11-21  CLT   AA                NC                      166       159\n 4 2023-11-22  CLT   AA                NC                      150       144\n 5 2023-11-29  CLT   AA                NC                      137       146\n 6 2023-11-29  CLT   AA                NC                      102        98\n 7 2023-11-25  CLT   AA                NC                       78        72\n 8 2023-11-30  LAX   AA                CA                       72        62\n 9 2023-11-22  CLT   AA                NC                       71        57\n10 2023-11-07  CLT   AA                NC                       71        60\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n\nNote that we can use the `arrange` function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by `flight_date` and secondarily by `dep_delay`, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time. [@cr-additional-fn-3]{highlight=\"23-25\"}\n\n:::{#cr-additional-fn-3}\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    \"destination_state\" = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  ) |>\n  arrange(\n    flight_date, desc(dep_delay)\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n:::\n::::\n\n# Join\nNext, we will explore the use of join operations, a technique that allows us to merge data from different sources based on common attributes. By applying join operations, we can enrich our dataset by combining related data from separate tables, thereby enhancing the depth and breadth of our analysis. We will demonstrate various types of JOINs and illustrate how they can be strategically employed to integrate and synchronize disparate data sources effectively.\n\n## Lookup table\nThe first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an `airline_codes` table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\n\nBefore we start, below is what the `airline_codes` looks like:\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nairline_codes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     code\n1      9E\n2      AA\n3      AS\n4      B6\n5      CO\n6      DH\n7      DL\n8      EA\n9      EV\n10     F9\n11     FL\n12     G4\n13     HA\n14     HP\n15     KH\n16 ML (1)\n17     MQ\n18     NK\n19     NW\n20     OH\n21     OO\n22 PA (1)\n23     PI\n24     PS\n25     QX\n26     TW\n27     TZ\n28     UA\n29     US\n30     VX\n31     WN\n32     XE\n33     YV\n34     YX\n                                                                          description\n1                                                                   Endeavor Air Inc.\n2                                                              American Airlines Inc.\n3                                                                Alaska Airlines Inc.\n4                                                                     JetBlue Airways\n5                                                          Continental Air Lines Inc.\n6                                                                    Independence Air\n7                                                                Delta Air Lines Inc.\n8                                                              Eastern Air Lines Inc.\n9                                                  ExpressJet Airlines LLC d/b/a aha!\n10                                                             Frontier Airlines Inc.\n11                                                        AirTran Airways Corporation\n12                                                                      Allegiant Air\n13                                                             Hawaiian Airlines Inc.\n14 America West Airlines Inc. (Merged with US Airways 9/05. Stopped reporting 10/07.)\n15                                                                    Aloha Air Cargo\n16                                                           Midway Airlines Inc. (1)\n17                                                                          Envoy Air\n18                                                                   Spirit Air Lines\n19                                                            Northwest Airlines Inc.\n20                                                                  PSA Airlines Inc.\n21                                                              SkyWest Airlines Inc.\n22                                                     Pan American World Airways (1)\n23                                                             Piedmont Aviation Inc.\n24                                                     Ukraine International Airlines\n25                                                                        Horizon Air\n26                                                            Trans World Airways LLC\n27                                                             ATA Airlines d/b/a ATA\n28                                                              United Air Lines Inc.\n29                                                                    US Airways Inc.\n30                                                                     Virgin America\n31                                                             Southwest Airlines Co.\n32                                                           ExpressJet Airlines Inc.\n33                                                                 Mesa Airlines Inc.\n34                                                                   Republic Airline\n```\n\n\n:::\n:::\n\n::::{.cr-section}\n\nWe use a `left_join` function from the `dplyr` package to merge the `flights_rdu` data frame with the `airline_codes` lookup table. It includes all records from the 'left' table (the `flights_rdu` table being passed down the pipeline), and the matched records from the 'right' table (`airline_codes`). If there is no match, the result is still a row in the output, but with NULL values in the columns of the 'right' table. [@cr-join-airlinecode-1]{highlight=\"2-3\"}\n\n:::{#cr-join-airlinecode-1}\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  )\n\nflights_rdu_joined_airline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: description <chr>\n```\n\n\n:::\n:::\n:::\n\nThis operation is based on matching the `reporting_airline` column from the `flights_rdu` dataframe with the `code` column in the `airline_codes` table. This type of join ensures that all records from the `flights_rdu` data frame are preserved, and corresponding airline names are added where available. [@cr-join-airlinecode-2]{highlight=\"4\"}\n\n:::{#cr-join-airlinecode-2}\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  )\n\nflights_rdu_joined_airline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: description <chr>\n```\n\n\n:::\n:::\n:::\n\nAfter merging, we use the `rename` function to change the column name from `description` to `airline_name`, enhancing the readability of the dataframe. [@cr-join-airlinecode-3]{highlight=\"6-8\"}\n\n:::{#cr-join-airlinecode-3}\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  ) |>\n  rename(\n    airline_name = description\n  )\n\nflights_rdu_joined_airline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: airline_name <chr>\n```\n\n\n:::\n:::\n:::\n::::\n\n## Enriching dataframe by joining another table\nFor this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The `weather_df` data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023.\n\n::: {.cell}\n\n:::\n\n::::{.cr-section}\n\nWe use a `right_join` to combine `flights_rdu` with `weather_data.` The join is based on matching `flight_date` in the flights data with `time` in the weather data. This method ensures all **date** is retained and supplemented with corresponding weather conditions and flight data where available.[@cr-join-weather-1]{highlight=\"2-5\"}\n\n:::{#cr-join-weather-1}\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_weather <- flights_rdu |>\n  right_join(\n    weather_data, \n    by = c(\"flight_date\" = \"time\")\n  ) \nflights_rdu_joined_weather\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 6 more variables: temperature <dbl>, dew_point <dbl>, humidity <dbl>,\n#   wind_speed <dbl>, pressure <dbl>, precipitation <dbl>\n```\n\n\n:::\n:::\n:::\n\n::::\n",
    "supporting": [
      "data-transformation-flights_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}