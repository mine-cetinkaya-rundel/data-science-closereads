{
  "hash": "e38049e0461b874b8e5875c2541dbed5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Flights Data Transformation Example\nsubtitle: Skeleton for the scrolly-telling project\norder: 2\nformat:\n  closeread-html:\n    cr-section:\n      layout: overlay-left\n    cr-style:\n      narrative-background-color-overlay: transparent\n      narrative-background-color-sidebar: transparent\n      section-background-color: transparent\n      narrative-text-color-overlay: black\nknitr:\n  opts_chunk: \n    dev.args:\n      bg: transparent\ncomments:\n  hypothesis: true\n---\n\n\n**Adapted from sample document from <https://closeread.dev/gallery/demos/build-up-plots/>**\n\n\n\n::: {.cell}\n\n:::\n\n\n\n# Recreating the dataframe used in the ggplot story\n\nStarting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the **ggplot closeread story**.\n\n::::{.cr-section}\n\nWe start by loading the `tidyverse` package, which contains the `ggplot2` and `dplyr` packages we need. [@cr-dplyr-1]{highlight=\"1\"}\n\n:::{#cr-dplyr-1}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n:::\n\nWe then load the data frame `flights`. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns. [@cr-dplyr-2]{highlight=\"2\"}\n\n:::{#cr-dplyr-2}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nflights <- read_csv(\"rdu-flights-23.csv\")\n\nflights # display the dataframe\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n\n:::\n\nWe use the `filter()` function to retain only those rows in the data frame where `Origin` is \"RDU\", `DestState` is either \"NC\" or \"CA\", and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023. \n\nWe first filter the dataset to only include flights that departed from RDU. This reduces the data to only those flights originating from Raleigh-Durham International Airport. This initial filter reduces the number of rows from 59,416 to 7,937, keeping only flights with `origin == \"RDU\"`. [@cr-dplyr-3a]{highlight=\"4-6\"}\n\n:::{#cr-dplyr-3a}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\"\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n\n:::\n\nNext, we further narrow the dataset to include only those flights whose destinations are in North Carolina (NC) or California (CA). This ensures we are focusing on flights between RDU and a specific set of states. This reduces the dataset from 7,937 rows to 622. [@cr-dplyr-3b]{highlight=\"5\"}\n\n:::{#cr-dplyr-3b}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    dest_state %in% c(\"NC\", \"CA\")\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4,553 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       1     1           14           6 2023-01-14  AA               \n 2  2023       1     1           21           6 2023-01-21  AA               \n 3  2023       1     1           28           6 2023-01-28  AA               \n 4  2023       1     1            1           7 2023-01-01  AA               \n 5  2023       1     1            2           1 2023-01-02  AA               \n 6  2023       1     1            3           2 2023-01-03  AA               \n 7  2023       1     1            4           3 2023-01-04  AA               \n 8  2023       1     1            5           4 2023-01-05  AA               \n 9  2023       1     1            6           5 2023-01-06  AA               \n10  2023       1     1            7           6 2023-01-07  AA               \n# ℹ 4,543 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n\n:::\n\nFinally, we filter the dataset by month, keeping only those flights that took place in November (`month == 11`). This restricts the dataset to a single month's worth of data for focused analysis. This brings the final row count down from 622 to 368, giving us the subset of interest: RDU departures to NC or CA in November 2023. [@cr-dplyr-3c]{highlight=\"5\"}\n\n:::{#cr-dplyr-3c}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights_rdu |>\n  filter(\n    month == 11\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n\n:::\n\nWhile we demonstrated the filtering process step by step to better understand the impact of each condition, it’s important to note that in practice, we typically apply all three filters in a single `filter()` call. [@cr-dplyr-3]{highlight=\"4-8\"}\n\n:::{#cr-dplyr-3}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   <dbl>   <dbl> <dbl>        <dbl>       <dbl> <date>      <chr>            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline <dbl>,\n#   iata_code_reporting_airline <chr>, tail_number <chr>,\n#   flight_number_reporting_airline <dbl>, origin_airport_id <dbl>,\n#   origin_airport_seq_id <dbl>, origin_city_market_id <dbl>, origin <chr>,\n#   origin_city_name <chr>, origin_state <chr>, origin_state_fips <dbl>,\n#   origin_state_name <chr>, origin_wac <dbl>, dest_airport_id <dbl>, …\n```\n\n\n:::\n:::\n\n:::\n\nWe want to select the variables that are used in the data visualization: `dep_delay`, `arr_delay`, `dest_state`, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6. [@cr-dplyr-4]{highlight=\"9-16\"}\n\n:::{#cr-dplyr-4}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay dest_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>     \n 1 2023-11-01  LAX   AA                       -2         1 CA        \n 2 2023-11-02  LAX   AA                       -7       -22 CA        \n 3 2023-11-03  LAX   AA                       -4       -29 CA        \n 4 2023-11-04  LAX   AA                       -8       -27 CA        \n 5 2023-11-25  CLT   AA                       -4         3 NC        \n 6 2023-11-26  CLT   AA                       18        23 NC        \n 7 2023-11-01  CLT   AA                       -7        -8 NC        \n 8 2023-11-02  CLT   AA                       -7        -9 NC        \n 9 2023-11-03  CLT   AA                       47        29 NC        \n10 2023-11-04  CLT   AA                       19         5 NC        \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n\nWe can rename the variable `dest_state` to \"destination_state\" for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed. [@cr-dplyr-5]{highlight=\"17-19\"}\n\n:::{#cr-dplyr-5}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu # display the dataframe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, `|>`. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that's easy to read and manage.  [@cr-dplyr]{highlight=\"3-19\"}\n\n:::{#cr-dplyr}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   <date>      <chr> <chr>                 <dbl>     <dbl> <chr>            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n::::\n\n# Other functions: `arrange`, `relocate`\n\nIn the following section, we build on top of the current dataset and explore the utilization of two additional **dplyr** functions: `arrange` and `relocate.` `arrange` is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, `relocate` is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.\n\n::::{.cr-section}\n\nThe `relocate` function is being used here to adjust the position of the `destination_state` column within the dataframe. By specifying `.before = dep_delay`, the function moves the `destination_state` column to a position immediately before the `dep_delay` column. [@cr-additional-fn-1]{highlight=\"20-22\"}\n\n:::{#cr-additional-fn-1}\n\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    destination_state = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  LAX   AA                CA                       -2         1\n 2 2023-11-02  LAX   AA                CA                       -7       -22\n 3 2023-11-03  LAX   AA                CA                       -4       -29\n 4 2023-11-04  LAX   AA                CA                       -8       -27\n 5 2023-11-25  CLT   AA                NC                       -4         3\n 6 2023-11-26  CLT   AA                NC                       18        23\n 7 2023-11-01  CLT   AA                NC                       -7        -8\n 8 2023-11-02  CLT   AA                NC                       -7        -9\n 9 2023-11-03  CLT   AA                NC                       47        29\n10 2023-11-04  CLT   AA                NC                       19         5\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n\nThe `arrange` function is then utilized to sort the dataframe based on the `dep_delay` column in descending order. By using `desc(dep_delay)`, it ensures that the entries with the longest departure delays are listed at the top of the data frame. [@cr-additional-fn-2]{highlight=\"23-25\"}\n\n:::{#cr-additional-fn-2}\n\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    destination_state = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  ) |>\n  arrange(\n    desc(dep_delay)\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-09  LAX   AA                CA                      209       215\n 2 2023-11-19  CLT   AA                NC                      174       166\n 3 2023-11-21  CLT   AA                NC                      166       159\n 4 2023-11-22  CLT   AA                NC                      150       144\n 5 2023-11-29  CLT   AA                NC                      137       146\n 6 2023-11-29  CLT   AA                NC                      102        98\n 7 2023-11-25  CLT   AA                NC                       78        72\n 8 2023-11-30  LAX   AA                CA                       72        62\n 9 2023-11-22  CLT   AA                NC                       71        57\n10 2023-11-07  CLT   AA                NC                       71        60\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n\nNote that we can use the `arrange` function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by `flight_date` and secondarily by `dep_delay`, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time. [@cr-additional-fn-3]{highlight=\"23-25\"}\n\n:::{#cr-additional-fn-3}\n\n::: {.cell}\n\n```{.r .cell-code}\n# add arrange and relocate at the end\n\nflights_rdu <- flights |>\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |>\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |>\n  rename(\n    destination_state = dest_state\n  ) |>\n  relocate(\n    destination_state, .before = dep_delay\n  ) |>\n  arrange(\n    flight_date, desc(dep_delay)\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n```\n\n\n:::\n:::\n\n:::\n::::\n\n# `mutate`\n\nWe now explore the use of the `mutate()` function from **dplyr**, which is used to create or transform variables in a data frame. We'll demonstrate two common use cases:\n\n* deriving new values using functions (e.g., extracting the day of the week), and\n\n* creating categorical labels using logical conditions (e.g., classifying flight delays).\n\n::::{.cr-section}\n\nBuilding on top of the dataset we obtained from preivous steps, we first use `mutate()` to create a new column, `day_of_week`, derived from `flight_date`. The `wday()` function from the `lubridate` package returns the day of the week as a factor, with labels like \"Mon\", \"Tue\", etc. [@cr-additional-fn-4]{highlight=\"5\"}\n\n:::{#cr-additional-fn-4}\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\n\nflights_rdu <- flights_rdu |>\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE)\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: day_of_week <ord>\n```\n\n\n:::\n:::\n\n:::\n\nWe can also use `mutate()` to add a variable that classifies departure delays using `ifelse()`. In this case, we label flights as \"On time or Early\" if dep_delay <= 0, and \"Delayed\" otherwise. [@cr-additional-fn-5]{highlight=\"3\"}\n\n:::{#cr-additional-fn-5}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu <- flights_rdu |>\n  mutate(\n    delay_status = ifelse(dep_delay <= 0, \"On time or Early\", \"Delayed\")\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 8\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 2 more variables: day_of_week <ord>, delay_status <chr>\n```\n\n\n:::\n:::\n\n:::\n\n:::{focus-on=\"cr-additional-fn-6\" highlight=\"2-8\"}\nFor more complex logic, `case_when()` is useful. Here, we categorize departure delays into multiple cases:\n\n* \"Early\" for negative delays,\n\n* \"On Time\" for 0-minute delay,\n\n* \"Minor Delay\" for delays up to 15 minutes, and\n\n* \"Major Delay\" for delays greater than 15 minutes.\n:::\n\n:::{#cr-additional-fn-6}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu <- flights_rdu |>\n  mutate(\n    delay_category = case_when(\n      dep_delay < 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay <= 15 ~ \"Minor Delay\",\n      dep_delay > 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week <ord>, delay_status <chr>,\n#   delay_category <chr>\n```\n\n\n:::\n:::\n\n:::\n\nAgain, we typically apply all three filters in a single `mutate()` call.[@cr-additional-fn-7]{highlight=\"2-10\"}\n\n:::{#cr-additional-fn-7}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu <- flights_rdu |>\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE),\n    delay_status = ifelse(dep_delay <= 0, \"On time or Early\", \"Delayed\"),\n    delay_category = case_when(\n      dep_delay < 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay <= 15 ~ \"Minor Delay\",\n      dep_delay > 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week <ord>, delay_status <chr>,\n#   delay_category <chr>\n```\n\n\n:::\n:::\n\n:::\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}