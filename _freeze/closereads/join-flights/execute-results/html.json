{
  "hash": "4e5e7c8458e50e4385ba2975d35882c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Flights data joining other datasets example\nsubtitle: Skeleton for the scrolly-telling project\norder: 3\nformat:\n  closeread-html:\n    cr-section:\n      layout: overlay-left\n    cr-style:\n      narrative-background-color-overlay: transparent\n      narrative-background-color-sidebar: transparent\n      section-background-color: transparent\n      narrative-text-color-overlay: black\nknitr:\n  opts_chunk: \n    dev.args:\n      bg: transparent\ncomments:\n  hypothesis: true\n---\n\n\n**Adapted from sample document from <https://closeread.dev/gallery/demos/build-up-plots/>**\n\n**Weather data from: <https://www.wunderground.com/history/monthly/us/nc/durham/KRDU/date/2023-11>**\n\n\n# Join\nNext, we will explore the use of join operations, a technique that allows us to merge data from different sources based on common attributes. By applying join operations, we can enrich our dataset by combining related data from separate tables, thereby enhancing the depth and breadth of our analysis. We will demonstrate various types of JOINs and illustrate how they can be strategically employed to integrate and synchronize disparate data sources effectively.\n\n## Lookup table\nThe first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an `airline_codes` table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\n\nBefore we start, below is what the `airline_codes` table looks like:\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 33 × 2\n   code  description                       \n   <chr> <chr>                             \n 1 9E    Endeavor Air Inc.                 \n 2 AA    American Airlines Inc.            \n 3 AS    Alaska Airlines Inc.              \n 4 B6    JetBlue Airways                   \n 5 CO    Continental Air Lines Inc.        \n 6 DH    Independence Air                  \n 7 DL    Delta Air Lines Inc.              \n 8 EA    Eastern Air Lines Inc.            \n 9 EV    ExpressJet Airlines LLC d/b/a aha!\n10 F9    Frontier Airlines Inc.            \n# ℹ 23 more rows\n```\n\n\n:::\n:::\n\n\n::::{.cr-section}\n\nWe use a `left_join` function from the `dplyr` package to merge the `flights_rdu` data frame with the `airline_codes` lookup table. It includes all records from the 'left' table (the `flights_rdu` table being passed down the pipeline), and the matched records from the 'right' table (`airline_codes`). If there is no match, the result is still a row in the output, but with NULL values in the columns of the 'right' table. [@cr-join-airlinecode-1]{highlight=\"2-3\"}\n\n:::{#cr-join-airlinecode-1}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  )\n```\n:::\n\n:::\n\nThis operation is based on matching the `reporting_airline` column from the `flights_rdu` dataframe with the `code` column in the `airline_codes` table. This type of join ensures that all records from the `flights_rdu` data frame are preserved, and corresponding airline names are added where available. The number of rows remains the same at 368, while the number of columns increases—from 9 to 10 after adding new airline description fields.[@cr-join-airlinecode-2]{highlight=\"4\"}\n\n:::{#cr-join-airlinecode-2}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |>\n  rename(\n    airline_name = description\n  ) |>\n  relocate(\n    airline_name, .after = reporting_airline\n  )\n\nflights_rdu_joined_airline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   <date>      <chr> <chr>             <chr>         <chr>                 <dbl>\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay <dbl>\n```\n\n\n:::\n:::\n\n:::\n\nNote that after merging, we use the `rename` function to change the column name from `description` to `airline_name`, and move `airline_name` after `reporting_airline` using `relocate`, enhancing the readability of the dataframe.\n[@cr-join-airlinecode-3]{highlight=\"6-11\"}\n\n:::{#cr-join-airlinecode-3}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_airline <- flights_rdu |>\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |>\n  rename(\n    airline_name = description\n  ) |>\n  relocate(\n    airline_name, .after = reporting_airline\n  )\n\nflights_rdu_joined_airline\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   <date>      <chr> <chr>             <chr>         <chr>                 <dbl>\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay <dbl>\n```\n\n\n:::\n:::\n\n:::\n::::\n\n## Finding unmatched codes using `anti_join`\n\nIn some cases, it’s useful to identify which values from one dataset do not appear in another. For example, we might want to know which carriers listed in our `airline_codes` lookup table did not operate any flights in our filtered `flights_rdu` dataset.\n\nWe can do this using `anti_join()`. It is a a join operation that returns all rows from the first (left) table that do not have a match in the second (right) table.\n\n::::{.cr-section}\nHere, we apply anti_join() to the `airline_codes` table using `flights_rdu` as the reference. The result is a list of carriers that are defined in the lookup table but are not present in our filtered flight data. The number of rows in the output indicates how many codes were not used. [@cr-join-airlinecode-4]{highlight=\"2-5\"}\n\n:::{#cr-join-airlinecode-4}\n\n::: {.cell}\n\n```{.r .cell-code}\nunused_airlines <- airline_codes |>\n  anti_join(\n    flights_rdu,\n    by = join_by(code == reporting_airline)\n  )\n\nunused_airlines\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 2\n   code  description                       \n   <chr> <chr>                             \n 1 9E    Endeavor Air Inc.                 \n 2 AS    Alaska Airlines Inc.              \n 3 B6    JetBlue Airways                   \n 4 CO    Continental Air Lines Inc.        \n 5 DH    Independence Air                  \n 6 EA    Eastern Air Lines Inc.            \n 7 EV    ExpressJet Airlines LLC d/b/a aha!\n 8 F9    Frontier Airlines Inc.            \n 9 FL    AirTran Airways Corporation       \n10 G4    Allegiant Air                     \n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::::\n\n## Enriching dataframe by joining another table\nFor this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The `weather_df` data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023. The dateset is displayed below. Notice that the weather data for 2023-11-02 is missing.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n         time temperature dew_point humidity wind_speed pressure precipitation\n1  2023-11-01        43.8      29.6     58.7        9.6     30.0          0.06\n2  2023-11-03        45.0      29.8     64.8        2.4     30.0          0.00\n3  2023-11-04        50.7      29.1     65.3        1.3     29.8          0.00\n4  2023-11-05        55.4      39.9     73.2        3.9     29.7          0.00\n5  2023-11-06        59.7      43.7     75.3        7.4     29.7          0.00\n6  2023-11-07        64.4      47.0     65.7        9.3     29.7          0.00\n7  2023-11-08        65.2      50.6     63.6        7.6     29.7          0.00\n8  2023-11-09        69.0      55.6     73.9       10.6     29.7          0.00\n9  2023-11-10        59.6      42.5     53.8        6.8     29.7          0.00\n10 2023-11-11        52.5      40.9     65.1        7.2     29.9          0.01\n11 2023-11-12        53.4      38.9     59.8        9.1     30.0          0.01\n12 2023-11-13        48.8      37.7     64.1        5.1     30.0          0.00\n13 2023-11-14        51.4      31.6     52.9        5.4     29.9          0.00\n14 2023-11-15        51.0      36.5     58.7        4.3     30.0          0.00\n15 2023-11-16        56.9      44.2     65.0        5.4     30.0          0.00\n16 2023-11-17        61.8      52.8     73.2        3.9     29.7          0.00\n17 2023-11-18        63.5      47.6     73.7        5.8     29.6          0.00\n18 2023-11-19        48.7      29.7     51.3        3.5     29.5          0.00\n19 2023-11-20        50.9      33.2     55.1        7.7     29.9          0.00\n20 2023-11-21        58.2      54.0     86.1       10.4     29.9          0.00\n21 2023-11-22        59.7      53.3     80.7        7.2     29.5          1.38\n22 2023-11-23        48.3      36.2     64.8        5.6     29.7          0.04\n23 2023-11-24        45.8      38.5     77.6        5.6     29.8          0.00\n24 2023-11-25        44.0      28.5     54.0        7.4     29.8          0.00\n25 2023-11-26        45.2      36.3     71.4        6.6     29.8          0.00\n26 2023-11-27        48.5      34.7     68.6        6.1     29.6          0.05\n27 2023-11-28        39.2      18.3     45.6        3.2     29.9          0.00\n28 2023-11-29        35.8      14.3     43.5        7.0     29.9          0.00\n29 2023-11-30        45.9      26.0     48.3        6.6     29.8          0.00\n```\n\n\n:::\n:::\n\n\n::::{.cr-section}\n\nWe use a `right_join` to combine `flights_rdu` with `weather_data.` The join is based on matching `flight_date` in the flights data with `time` in the weather data. This ensures that all dates present in the `weather_data` dataset are retained, along with corresponding flight information when available.[@cr-join-weather-1]{highlight=\"2-5\"}\n\n:::{#cr-join-weather-1}\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_rdu_joined_weather <- flights_rdu |>\n  right_join(\n    weather_data, \n    by = join_by(flight_date == time)\n  ) \n```\n:::\n\n:::\n\nAfter performing the `right_join`, the resulting dataset changes from 368 rows and 10 columns to 355 rows and 15 columns. The increase in columns comes from the additional weather-related variables—such as temperature, humidity, wind speed, and precipitation—added from the `weather_data` table.\nThe decrease in rows occurs because the flight date 2023-11-02 in `flights_rdu` did not have matching weather records, and since a `right_join` only keeps rows where the key exists in the right-hand table (`weather_data`), those unmatched flight rows are dropped.[@cr-join-weather-2]{highlight=\"1\"}\n\n:::{#cr-join-weather-2}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 355 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   <date>      <chr> <chr>             <chr>                 <dbl>     <dbl>\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 345 more rows\n# ℹ 6 more variables: temperature <dbl>, dew_point <dbl>, humidity <dbl>,\n#   wind_speed <dbl>, pressure <dbl>, precipitation <dbl>\n```\n\n\n:::\n:::\n\n:::\n\n::::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}