[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data science closereads",
    "section": "",
    "text": "Visualizing RDU flights\n\n\nAdd a description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlights Data Transformation Example\n\n\nAdd a description\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html",
    "href": "closereads/ggplot-story-flights.html",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#introduction",
    "href": "closereads/ggplot-story-flights.html#introduction",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#data",
    "href": "closereads/ggplot-story-flights.html#data",
    "title": "Visualizing RDU flights",
    "section": "Data",
    "text": "Data\nIn this tutorial, we’ll focus specifically on the flights departing from Raleigh-Durham International Airport (RDU) and heading to destinations in North Carolina and California. You’ll learn how to visualize data to uncover patterns in departure and arrival delays. By the end of this tutorial, you should be able to craft visual narratives that are informative and visually appealing, providing you with a fundamental skill set critical in the field of data science.\nThe packages we used in this tutorial for plotting include ggplot2 and ggthemes.\nIn our visualization, we explore the relationship between departure delays (dep_delay) and arrival delays (arr_delay) for flights from Raleigh-Durham International Airport (RDU) to destinations in North Carolina and California. The graph you will learn to create visually compares the length of departure delays to arrival delays.\n\n\nRows: 59416 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (27): reporting_airline, iata_code_reporting_airline, tail_number, orig...\ndbl  (57): year, quarter, month, day_of_month, day_of_week, dot_id_reporting...\nlgl  (25): div3airport, div3airport_id, div3airport_seq_id, div3wheels_on, d...\ndate  (1): flight_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#plot",
    "href": "closereads/ggplot-story-flights.html#plot",
    "title": "Visualizing RDU flights",
    "section": "Plot",
    "text": "Plot\nWe’ll start by loading our data, then move on to constructing our plot using ggplot2. This will involve mapping our variables to the appropriate axes, customizing the aesthetic elements of our plot, and refining our visual with tools designed to enhance clarity and impact. The resultant plot is provided below, along with a full narrative on how it is constructed.\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal()."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "href": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "title": "Visualizing RDU flights",
    "section": "How to read the scrolly-telling story",
    "text": "How to read the scrolly-telling story\nBefore we start, let’s look at how to read the scrolly-telling story. As you progress through the narrative, you’ll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resultant visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code chunk is highlighted to indicate exactly where and how these elements are integrated into the plot.\n\n\n\nScrolly-telling demonstration\n\n\n\n\n\n\nStart with the flights_rdu data frame. ::: {.cell}\nggplot(\n  data = flights_rdu, \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis. ::: {.cell}\nggplot(\n  data = flights_rdu, \n  mapping = aes(x = dep_delay)\n)\n\n::: :::{#cr-plot-2} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-3” highlight=“3-6”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. ::: {.cell}\nggplot(\n  data = flights_rdu, \n  mapping = aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n::: Typically, when using ggplot(), the arguments data and mapping are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows: ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n::: ::: :::{#cr-plot-3} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point()\n\n::: :::{#cr-plot-4} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state)\n  )\n\n::: :::{#cr-plot-5} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-6” highlight=“10”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  )\n::: ::: :::{#cr-plot-6} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\"\n  )\n\n::: :::{#cr-plot-7} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-8” highlight=“14”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\"\n  )\n::: ::: :::{#cr-plot-8} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\"\n  )\n\n:::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\"\n  )\n\n:::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  )\n\n::: :::{#cr-plot-11} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-12” highlight=“20”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind()\n::: ::: :::{#cr-plot-12} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-13” highlight=“21”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal(). ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n::: :::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n::::"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#reflection",
    "href": "closereads/ggplot-story-flights.html#reflection",
    "title": "Visualizing RDU flights",
    "section": "Reflection",
    "text": "Reflection\nIn this demonstration, you explored how to create a ggplot using the RDU flights dataset. As we wrap up, take a moment to reflect on and note down what you’ve learned from this example:"
  },
  {
    "objectID": "closereads/data-transformation-flights.html",
    "href": "closereads/data-transformation-flights.html",
    "title": "Flights Data Transformation Example",
    "section": "",
    "text": "Adapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/\n\nlibrary(tidyverse)\n\n\n\n\n\nIn the first line we load the tidyverse package, which contains the ggplot2 and dplyr packages we need.\n\n\n\n\nWe then load the data frame flights. This dataset is now ready for analysis or manipulation in R.\n\n\n\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, |&gt;. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that’s easy to read and manage.\n\n\n\n\nWe use the filter() function to retain only those rows in the data frame where Origin is “RDU”, DestState is either “NC” or “CA”, and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023.\n\n\n\n\nWe want to select the variables that are used in the data visualization: DepDelay, ArrDelay, DestState.\n\n\n\n\nWe then rename the variable DestState to “Destination_State”.\n\n\n\n\nWe finally remove all rows from the spotify_songs data frame that contain NA values in any column.\n\n\n\n\nWe use head() to display the first five rows of the dataset after transformation.\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    Origin == \"RDU\",\n    DestState %in% c(\"NC\", \"CA\"), # NC and CA\n    Month == 11\n  ) |&gt;\n  select(\n    c(\"DepDelay\", \"ArrDelay\", \"DestState\")\n  ) |&gt;\n  rename(\n    \"Destination_State\" = DestState\n  ) |&gt;\n  relocate(\n    Destination_State, .before = DepDelay\n  ) |&gt;\n  arrange(\n    desc(DepDelay)\n  )\n\nflights_rdu\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Keep this pipe and show it step by step\n# include more variables in select() to identify the flights e.g. flight number, date, destination cities\n\nlibrary(tidyverse)\nflights &lt;- read_csv(here::here(\"closereads\", \"data/rdu-flights-23.csv\"))\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    c(\"DepDelay\", \"ArrDelay\", \"DestState\")\n  ) |&gt;\n  rename(\n    \"Destination_State\" = DestState\n  )\n\nflights_rdu\n\n\n\n\n\nInsert inline code cell here"
  }
]