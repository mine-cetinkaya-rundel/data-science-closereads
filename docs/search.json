[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data science closereads",
    "section": "",
    "text": "Visualizing RDU flights\n\n\nThis story explores flight delay pattern using visualizations built with ggplot2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRDU Flights Data Transformation\n\n\nThis section focuses on preparing the raw flight dataset for analysis through a series of data transformation steps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJoining RDU Flights Data with Other Datasets\n\n\nIn this section, we explore how to combine information from multiple datasets to enrich our analysis.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroup by\n\n\nIn this section, we focus on summarizing flight data to uncover broader patterns and trends.\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "closereads/join-flights.html",
    "href": "closereads/join-flights.html",
    "title": "Joining RDU Flights Data with Other Datasets",
    "section": "",
    "text": "In this section, we explore how to combine information from multiple datasets to enrich our analysis. We will explore the use of join operations, a technique that allows us to merge data from different sources based on common attributes. By applying join operations, we can enrich our dataset by combining related data from separate tables, thereby enhancing the depth and breadth of our analysis. We will demonstrate various types of JOINs and illustrate how they can be strategically employed to integrate and synchronize disparate data sources effectively.\n\n\nThis project uses data from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California. We join the flights data with an airline codes lookup table to translate carrier abbreviations into full airline names. We also demonstrate how to merge it with a daily weather dataset to bring in relevant weather conditions, helping us explore how environmental factors might relate to flight delays.\n\n\n\nThe first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an airline_codes table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\nBefore we start, below is what the airline_codes table looks like:\n\n\n\n\n\ncode\nairline_name\n\n\n\n\n9E\nEndeavor Air Inc.\n\n\nAA\nAmerican Airlines Inc.\n\n\nAS\nAlaska Airlines Inc.\n\n\nB6\nJetBlue Airways\n\n\nCO\nContinental Air Lines Inc.\n\n\nDH\nIndependence Air\n\n\nDL\nDelta Air Lines Inc.\n\n\nEA\nEastern Air Lines Inc.\n\n\nEV\nExpressJet Airlines LLC d/b/a aha!\n\n\nF9\nFrontier Airlines Inc.\n\n\nFL\nAirTran Airways Corporation\n\n\nG4\nAllegiant Air\n\n\nHA\nHawaiian Airlines Inc.\n\n\nKH\nAloha Air Cargo\n\n\nML (1)\nMidway Airlines Inc. (1)\n\n\nMQ\nEnvoy Air\n\n\nNK\nSpirit Air Lines\n\n\nNW\nNorthwest Airlines Inc.\n\n\nOH\nPSA Airlines Inc.\n\n\nOO\nSkyWest Airlines Inc.\n\n\nPA (1)\nPan American World Airways (1)\n\n\nPI\nPiedmont Aviation Inc.\n\n\nPS\nUkraine International Airlines\n\n\nQX\nHorizon Air\n\n\nTW\nTrans World Airways LLC\n\n\nTZ\nATA Airlines d/b/a ATA\n\n\nUA\nUnited Air Lines Inc.\n\n\nUS\nUS Airways Inc.\n\n\nVX\nVirgin America\n\n\nWN\nSouthwest Airlines Co.\n\n\nXE\nExpressJet Airlines Inc.\n\n\nYV\nMesa Airlines Inc.\n\n\nYX\nRepublic Airline\n\n\n\n\n\n\n\n\n\nWe use a left_join function from the dplyr package to merge the flights_rdu data frame with the airline_codes lookup table. It includes all records from the ‘left’ table (the flights_rdu table being passed down the pipeline), and the matched records from the ‘right’ table (airline_codes). If there is no match, the result is still a row in the output, but with NULL values in the columns of the ‘right’ table.\n\n\n\nLeft join graphic demonstration\n\n\n\n\n\n\nThis operation is based on matching the reporting_airline column from the flights_rdu data frame with the code column in the airline_codes table. In the join_by() syntax, this reads as: “join by: where reporting_airline is equal to code.” This type of left join ensures that all records from flights_rdu are preserved, and additional information, such as the full airline name, is added where a match is found in airline_codes. The number of rows remains unchanged at 368, since all flight records are retained. The number of columns increases from 6 to 7, with the addition of a new descriptive field for the airline. Note that to improve the readability of the resulting data frame, we use relocate() to move the new airline_name column immediately after reporting_airline.\n\n\n\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  )\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |&gt;\n  relocate(airline_name, .after = reporting_airline)\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;                 &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\nIn some cases, it’s useful to identify which values from one dataset do not appear in another. For example, we might want to know which carriers listed in our airline_codes lookup table did not operate any flights in our filtered flights_rdu dataset.\nWe can do this using anti_join(). It is a a join operation that returns all rows from the first (left) table that do not have a match in the second (right) table.\n\n\n\n\nHere, we apply anti_join() to the airline_codes table using flights_rdu as the reference. The result is a list of carriers that are defined in the lookup table but are not present in our filtered flight data. The number of rows in the output indicates how many codes were not used.\n\n\n\nAnti-join graphic demonstration\n\n\n\n\n\n\n\n\n\nunused_airlines &lt;- airline_codes |&gt;\n  anti_join(\n    flights_rdu,\n    by = join_by(code == reporting_airline)\n  )\n\nunused_airlines\n\n# A tibble: 30 × 2\n   code  airline_name                      \n   &lt;chr&gt; &lt;chr&gt;                             \n 1 9E    Endeavor Air Inc.                 \n 2 AS    Alaska Airlines Inc.              \n 3 B6    JetBlue Airways                   \n 4 CO    Continental Air Lines Inc.        \n 5 DH    Independence Air                  \n 6 EA    Eastern Air Lines Inc.            \n 7 EV    ExpressJet Airlines LLC d/b/a aha!\n 8 F9    Frontier Airlines Inc.            \n 9 FL    AirTran Airways Corporation       \n10 G4    Allegiant Air                     \n# ℹ 20 more rows\n\n\n\n\n\n\n\n\n\nFor this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The weather_df data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023. The dateset is displayed below. Notice that the weather data for 2023-11-02 is missing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime\ntemperature\ndew_point\nhumidity\nwind_speed\npressure\nprecipitation\n\n\n\n\n2023-11-01\n43.8\n29.6\n58.7\n9.6\n30.0\n0.06\n\n\n2023-11-03\n45.0\n29.8\n64.8\n2.4\n30.0\n0.00\n\n\n2023-11-04\n50.7\n29.1\n65.3\n1.3\n29.8\n0.00\n\n\n2023-11-05\n55.4\n39.9\n73.2\n3.9\n29.7\n0.00\n\n\n2023-11-06\n59.7\n43.7\n75.3\n7.4\n29.7\n0.00\n\n\n2023-11-07\n64.4\n47.0\n65.7\n9.3\n29.7\n0.00\n\n\n2023-11-08\n65.2\n50.6\n63.6\n7.6\n29.7\n0.00\n\n\n2023-11-09\n69.0\n55.6\n73.9\n10.6\n29.7\n0.00\n\n\n2023-11-10\n59.6\n42.5\n53.8\n6.8\n29.7\n0.00\n\n\n2023-11-11\n52.5\n40.9\n65.1\n7.2\n29.9\n0.01\n\n\n2023-11-12\n53.4\n38.9\n59.8\n9.1\n30.0\n0.01\n\n\n2023-11-13\n48.8\n37.7\n64.1\n5.1\n30.0\n0.00\n\n\n2023-11-14\n51.4\n31.6\n52.9\n5.4\n29.9\n0.00\n\n\n2023-11-15\n51.0\n36.5\n58.7\n4.3\n30.0\n0.00\n\n\n2023-11-16\n56.9\n44.2\n65.0\n5.4\n30.0\n0.00\n\n\n2023-11-17\n61.8\n52.8\n73.2\n3.9\n29.7\n0.00\n\n\n2023-11-18\n63.5\n47.6\n73.7\n5.8\n29.6\n0.00\n\n\n2023-11-19\n48.7\n29.7\n51.3\n3.5\n29.5\n0.00\n\n\n2023-11-20\n50.9\n33.2\n55.1\n7.7\n29.9\n0.00\n\n\n2023-11-21\n58.2\n54.0\n86.1\n10.4\n29.9\n0.00\n\n\n2023-11-22\n59.7\n53.3\n80.7\n7.2\n29.5\n1.38\n\n\n2023-11-23\n48.3\n36.2\n64.8\n5.6\n29.7\n0.04\n\n\n2023-11-24\n45.8\n38.5\n77.6\n5.6\n29.8\n0.00\n\n\n2023-11-25\n44.0\n28.5\n54.0\n7.4\n29.8\n0.00\n\n\n2023-11-26\n45.2\n36.3\n71.4\n6.6\n29.8\n0.00\n\n\n2023-11-27\n48.5\n34.7\n68.6\n6.1\n29.6\n0.05\n\n\n2023-11-28\n39.2\n18.3\n45.6\n3.2\n29.9\n0.00\n\n\n2023-11-29\n35.8\n14.3\n43.5\n7.0\n29.9\n0.00\n\n\n2023-11-30\n45.9\n26.0\n48.3\n6.6\n29.8\n0.00\n\n\n\n\n\n\n\n\n\nWe use a right_join to combine flights_rdu with weather_data. The join is based on matching flight_date in the flights data with time in the weather data. This ensures that all dates present in the weather_data dataset are retained, along with corresponding flight information when available.\n\n\n\nRight join graphic demonstration\n\n\n\n\n\n\nAfter performing the right_join, the resulting dataset changes from 368 rows and 6 columns to 355 rows and 12 columns. The increase in columns comes from the additional weather-related variables—such as temperature, humidity, wind speed, and precipitation—added from the weather_data table. The decrease in rows occurs because the flight date 2023-11-02 in flights_rdu did not have matching weather records, and since a right_join only keeps rows where the key exists in the right-hand table (weather_data), those unmatched flight rows are dropped.\n\n\n\n\n\n\n\nflights_rdu_joined_weather &lt;- flights_rdu |&gt;\n  right_join(\n    weather_data, \n    by = join_by(flight_date == time)\n  ) \n\n\n\n\n\n# A tibble: 355 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 345 more rows\n# ℹ 6 more variables: temperature &lt;dbl&gt;, dew_point &lt;dbl&gt;, humidity &lt;dbl&gt;,\n#   wind_speed &lt;dbl&gt;, pressure &lt;dbl&gt;, precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "closereads/join-flights.html#data",
    "href": "closereads/join-flights.html#data",
    "title": "Joining RDU Flights Data with Other Datasets",
    "section": "",
    "text": "This project uses data from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California. We join the flights data with an airline codes lookup table to translate carrier abbreviations into full airline names. We also demonstrate how to merge it with a daily weather dataset to bring in relevant weather conditions, helping us explore how environmental factors might relate to flight delays."
  },
  {
    "objectID": "closereads/join-flights.html#lookup-table",
    "href": "closereads/join-flights.html#lookup-table",
    "title": "Joining RDU Flights Data with Other Datasets",
    "section": "",
    "text": "The first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an airline_codes table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\nBefore we start, below is what the airline_codes table looks like:\n\n\n\n\n\ncode\nairline_name\n\n\n\n\n9E\nEndeavor Air Inc.\n\n\nAA\nAmerican Airlines Inc.\n\n\nAS\nAlaska Airlines Inc.\n\n\nB6\nJetBlue Airways\n\n\nCO\nContinental Air Lines Inc.\n\n\nDH\nIndependence Air\n\n\nDL\nDelta Air Lines Inc.\n\n\nEA\nEastern Air Lines Inc.\n\n\nEV\nExpressJet Airlines LLC d/b/a aha!\n\n\nF9\nFrontier Airlines Inc.\n\n\nFL\nAirTran Airways Corporation\n\n\nG4\nAllegiant Air\n\n\nHA\nHawaiian Airlines Inc.\n\n\nKH\nAloha Air Cargo\n\n\nML (1)\nMidway Airlines Inc. (1)\n\n\nMQ\nEnvoy Air\n\n\nNK\nSpirit Air Lines\n\n\nNW\nNorthwest Airlines Inc.\n\n\nOH\nPSA Airlines Inc.\n\n\nOO\nSkyWest Airlines Inc.\n\n\nPA (1)\nPan American World Airways (1)\n\n\nPI\nPiedmont Aviation Inc.\n\n\nPS\nUkraine International Airlines\n\n\nQX\nHorizon Air\n\n\nTW\nTrans World Airways LLC\n\n\nTZ\nATA Airlines d/b/a ATA\n\n\nUA\nUnited Air Lines Inc.\n\n\nUS\nUS Airways Inc.\n\n\nVX\nVirgin America\n\n\nWN\nSouthwest Airlines Co.\n\n\nXE\nExpressJet Airlines Inc.\n\n\nYV\nMesa Airlines Inc.\n\n\nYX\nRepublic Airline\n\n\n\n\n\n\n\n\n\nWe use a left_join function from the dplyr package to merge the flights_rdu data frame with the airline_codes lookup table. It includes all records from the ‘left’ table (the flights_rdu table being passed down the pipeline), and the matched records from the ‘right’ table (airline_codes). If there is no match, the result is still a row in the output, but with NULL values in the columns of the ‘right’ table.\n\n\n\nLeft join graphic demonstration\n\n\n\n\n\n\nThis operation is based on matching the reporting_airline column from the flights_rdu data frame with the code column in the airline_codes table. In the join_by() syntax, this reads as: “join by: where reporting_airline is equal to code.” This type of left join ensures that all records from flights_rdu are preserved, and additional information, such as the full airline name, is added where a match is found in airline_codes. The number of rows remains unchanged at 368, since all flight records are retained. The number of columns increases from 6 to 7, with the addition of a new descriptive field for the airline. Note that to improve the readability of the resulting data frame, we use relocate() to move the new airline_name column immediately after reporting_airline.\n\n\n\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  )\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |&gt;\n  relocate(airline_name, .after = reporting_airline)\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;                 &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay &lt;dbl&gt;"
  },
  {
    "objectID": "closereads/join-flights.html#finding-unmatched-codes-using-anti_join",
    "href": "closereads/join-flights.html#finding-unmatched-codes-using-anti_join",
    "title": "Joining RDU Flights Data with Other Datasets",
    "section": "",
    "text": "In some cases, it’s useful to identify which values from one dataset do not appear in another. For example, we might want to know which carriers listed in our airline_codes lookup table did not operate any flights in our filtered flights_rdu dataset.\nWe can do this using anti_join(). It is a a join operation that returns all rows from the first (left) table that do not have a match in the second (right) table.\n\n\n\n\nHere, we apply anti_join() to the airline_codes table using flights_rdu as the reference. The result is a list of carriers that are defined in the lookup table but are not present in our filtered flight data. The number of rows in the output indicates how many codes were not used.\n\n\n\nAnti-join graphic demonstration\n\n\n\n\n\n\n\n\n\nunused_airlines &lt;- airline_codes |&gt;\n  anti_join(\n    flights_rdu,\n    by = join_by(code == reporting_airline)\n  )\n\nunused_airlines\n\n# A tibble: 30 × 2\n   code  airline_name                      \n   &lt;chr&gt; &lt;chr&gt;                             \n 1 9E    Endeavor Air Inc.                 \n 2 AS    Alaska Airlines Inc.              \n 3 B6    JetBlue Airways                   \n 4 CO    Continental Air Lines Inc.        \n 5 DH    Independence Air                  \n 6 EA    Eastern Air Lines Inc.            \n 7 EV    ExpressJet Airlines LLC d/b/a aha!\n 8 F9    Frontier Airlines Inc.            \n 9 FL    AirTran Airways Corporation       \n10 G4    Allegiant Air                     \n# ℹ 20 more rows"
  },
  {
    "objectID": "closereads/join-flights.html#enriching-dataframe-by-joining-another-table",
    "href": "closereads/join-flights.html#enriching-dataframe-by-joining-another-table",
    "title": "Joining RDU Flights Data with Other Datasets",
    "section": "",
    "text": "For this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The weather_df data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023. The dateset is displayed below. Notice that the weather data for 2023-11-02 is missing.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntime\ntemperature\ndew_point\nhumidity\nwind_speed\npressure\nprecipitation\n\n\n\n\n2023-11-01\n43.8\n29.6\n58.7\n9.6\n30.0\n0.06\n\n\n2023-11-03\n45.0\n29.8\n64.8\n2.4\n30.0\n0.00\n\n\n2023-11-04\n50.7\n29.1\n65.3\n1.3\n29.8\n0.00\n\n\n2023-11-05\n55.4\n39.9\n73.2\n3.9\n29.7\n0.00\n\n\n2023-11-06\n59.7\n43.7\n75.3\n7.4\n29.7\n0.00\n\n\n2023-11-07\n64.4\n47.0\n65.7\n9.3\n29.7\n0.00\n\n\n2023-11-08\n65.2\n50.6\n63.6\n7.6\n29.7\n0.00\n\n\n2023-11-09\n69.0\n55.6\n73.9\n10.6\n29.7\n0.00\n\n\n2023-11-10\n59.6\n42.5\n53.8\n6.8\n29.7\n0.00\n\n\n2023-11-11\n52.5\n40.9\n65.1\n7.2\n29.9\n0.01\n\n\n2023-11-12\n53.4\n38.9\n59.8\n9.1\n30.0\n0.01\n\n\n2023-11-13\n48.8\n37.7\n64.1\n5.1\n30.0\n0.00\n\n\n2023-11-14\n51.4\n31.6\n52.9\n5.4\n29.9\n0.00\n\n\n2023-11-15\n51.0\n36.5\n58.7\n4.3\n30.0\n0.00\n\n\n2023-11-16\n56.9\n44.2\n65.0\n5.4\n30.0\n0.00\n\n\n2023-11-17\n61.8\n52.8\n73.2\n3.9\n29.7\n0.00\n\n\n2023-11-18\n63.5\n47.6\n73.7\n5.8\n29.6\n0.00\n\n\n2023-11-19\n48.7\n29.7\n51.3\n3.5\n29.5\n0.00\n\n\n2023-11-20\n50.9\n33.2\n55.1\n7.7\n29.9\n0.00\n\n\n2023-11-21\n58.2\n54.0\n86.1\n10.4\n29.9\n0.00\n\n\n2023-11-22\n59.7\n53.3\n80.7\n7.2\n29.5\n1.38\n\n\n2023-11-23\n48.3\n36.2\n64.8\n5.6\n29.7\n0.04\n\n\n2023-11-24\n45.8\n38.5\n77.6\n5.6\n29.8\n0.00\n\n\n2023-11-25\n44.0\n28.5\n54.0\n7.4\n29.8\n0.00\n\n\n2023-11-26\n45.2\n36.3\n71.4\n6.6\n29.8\n0.00\n\n\n2023-11-27\n48.5\n34.7\n68.6\n6.1\n29.6\n0.05\n\n\n2023-11-28\n39.2\n18.3\n45.6\n3.2\n29.9\n0.00\n\n\n2023-11-29\n35.8\n14.3\n43.5\n7.0\n29.9\n0.00\n\n\n2023-11-30\n45.9\n26.0\n48.3\n6.6\n29.8\n0.00\n\n\n\n\n\n\n\n\n\nWe use a right_join to combine flights_rdu with weather_data. The join is based on matching flight_date in the flights data with time in the weather data. This ensures that all dates present in the weather_data dataset are retained, along with corresponding flight information when available.\n\n\n\nRight join graphic demonstration\n\n\n\n\n\n\nAfter performing the right_join, the resulting dataset changes from 368 rows and 6 columns to 355 rows and 12 columns. The increase in columns comes from the additional weather-related variables—such as temperature, humidity, wind speed, and precipitation—added from the weather_data table. The decrease in rows occurs because the flight date 2023-11-02 in flights_rdu did not have matching weather records, and since a right_join only keeps rows where the key exists in the right-hand table (weather_data), those unmatched flight rows are dropped.\n\n\n\n\n\n\n\nflights_rdu_joined_weather &lt;- flights_rdu |&gt;\n  right_join(\n    weather_data, \n    by = join_by(flight_date == time)\n  ) \n\n\n\n\n\n# A tibble: 355 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 345 more rows\n# ℹ 6 more variables: temperature &lt;dbl&gt;, dew_point &lt;dbl&gt;, humidity &lt;dbl&gt;,\n#   wind_speed &lt;dbl&gt;, pressure &lt;dbl&gt;, precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "closereads/groupby-flights.html",
    "href": "closereads/groupby-flights.html",
    "title": "Group by",
    "section": "",
    "text": "In this section, we focus on summarizing flight data to uncover broader patterns and trends. The goal here is to aggregate the data: grouping flights by meaningful categories such as day of the week, airline, or time of day. This allows us to answer higher-level questions like Which days are busiest?, When do delays happen most often?, or What are the main reasons for cancellations over time? By grouping the data and calculating summary statistics, we can efficiently condense large datasets into interpretable insight.\n\n\nThis project uses data from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California.\n\n\n\n\n\n\n\nFirst, let’s look at the dataset that we will be using for the analysis.\n\n\n\n\nWe begin with a simple example: counting the number of flights on each day of the week. To do this, we use the group_by() function to group the data by the day_of_week variable. It’s important to note that when group_by() is used on its own, the output looks identical to the original data frame, with no visible change occurs. That’s because group_by() doesn’t modify the data directly. This grouping only becomes meaningful when combined with a function like summarize(), which uses that metadata to compute statistics for each group.\n\n\n\n\nThe group_by() function is followed by summarize() to count the number of records within each group. In this example, n() is used to count the number of rows in each group, giving us a frequency count of flights by day of the week.\n\n\n\n\nIn our next example, we group data by month and cancellation code to see trends over the year in terms of why flights are cancelled, showing problematic months or operational challenges during certain periods. By applying group_by(month, cancellation_code), we create grouped combinations of each month and cancellation reason.\n\n\n\n\nThis enables us to count how many cancellations occurred for each reason in each month using summarize() and n(). After summarization, we use .groups = \"drop\" to remove the grouping structure, so the output is returned as a regular, ungrouped dataframe.\n\n\n\n\nNext, we analyze how flight performance varies across different times of the day, grouped by airline. We begin by using mutate() along with case_when() to create a new categorical variable, time_of_day, derived from crs_dep_time (the scheduled departure time). Each flight is categorized into one of four time blocks.\n\n\n\n\nAfter defining the time periods, we apply group_by() with both reporting_airline and our newly derived variable time_of_day.\n\n\n\n\nWe can then use summarize() to calculate two key metrics: average_delay: The mean departure delay within each group; on_time_rate: The proportion of flights that departed on time or early. We also use .groups = \"drop\" to return the result as an ungrouped data frame.\n\n\n\n\n\n\n\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 368 × 110\n# Groups:   day_of_week [7]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 7 × 2\n  day_of_week flight_count\n        &lt;dbl&gt;        &lt;int&gt;\n1           1         8853\n2           2         8505\n3           3         8561\n4           4         8829\n5           5         8864\n6           6         7167\n7           7         8637\n\n\n\n\n\n\n# A tibble: 59,416 × 110\n# Groups:   month, cancellation_code [46]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 46 × 3\n   month cancellation_code cancellation\n   &lt;dbl&gt; &lt;chr&gt;                    &lt;int&gt;\n 1     1 A                           10\n 2     1 B                           28\n 3     1 C                           19\n 4     1 D                            2\n 5     1 &lt;NA&gt;                      4247\n 6     2 A                           15\n 7     2 B                           30\n 8     2 C                            1\n 9     2 &lt;NA&gt;                      4016\n10     3 A                           18\n# ℹ 36 more rows\n\n\n\n\n\n\n# A tibble: 59,416 × 111\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 104 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 59,416 × 111\n# Groups:   reporting_airline, time_of_day [13]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 104 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 13 × 4\n   reporting_airline time_of_day   average_delay on_time_rate\n   &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt;\n 1 9E                Early Morning         10.4         0.713\n 2 AA                Early Morning         16.8         0.677\n 3 AS                Early Morning          7.21        0.559\n 4 B6                Early Morning         27.9         0.502\n 5 DL                Early Morning         11.5         0.661\n 6 F9                Early Morning         19.7         0.589\n 7 MQ                Early Morning          5.73        0.709\n 8 NK                Early Morning         34.1         0.382\n 9 OH                Early Morning         13.0         0.774\n10 OO                Early Morning          1.42        0.788\n11 UA                Early Morning         13.2         0.658\n12 WN                Early Morning          9.35        0.546\n13 YX                Early Morning          1.72        0.841"
  },
  {
    "objectID": "closereads/groupby-flights.html#data",
    "href": "closereads/groupby-flights.html#data",
    "title": "Group by",
    "section": "",
    "text": "This project uses data from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California."
  },
  {
    "objectID": "closereads/groupby-flights.html#examples",
    "href": "closereads/groupby-flights.html#examples",
    "title": "Group by",
    "section": "",
    "text": "First, let’s look at the dataset that we will be using for the analysis.\n\n\n\n\nWe begin with a simple example: counting the number of flights on each day of the week. To do this, we use the group_by() function to group the data by the day_of_week variable. It’s important to note that when group_by() is used on its own, the output looks identical to the original data frame, with no visible change occurs. That’s because group_by() doesn’t modify the data directly. This grouping only becomes meaningful when combined with a function like summarize(), which uses that metadata to compute statistics for each group.\n\n\n\n\nThe group_by() function is followed by summarize() to count the number of records within each group. In this example, n() is used to count the number of rows in each group, giving us a frequency count of flights by day of the week.\n\n\n\n\nIn our next example, we group data by month and cancellation code to see trends over the year in terms of why flights are cancelled, showing problematic months or operational challenges during certain periods. By applying group_by(month, cancellation_code), we create grouped combinations of each month and cancellation reason.\n\n\n\n\nThis enables us to count how many cancellations occurred for each reason in each month using summarize() and n(). After summarization, we use .groups = \"drop\" to remove the grouping structure, so the output is returned as a regular, ungrouped dataframe.\n\n\n\n\nNext, we analyze how flight performance varies across different times of the day, grouped by airline. We begin by using mutate() along with case_when() to create a new categorical variable, time_of_day, derived from crs_dep_time (the scheduled departure time). Each flight is categorized into one of four time blocks.\n\n\n\n\nAfter defining the time periods, we apply group_by() with both reporting_airline and our newly derived variable time_of_day.\n\n\n\n\nWe can then use summarize() to calculate two key metrics: average_delay: The mean departure delay within each group; on_time_rate: The proportion of flights that departed on time or early. We also use .groups = \"drop\" to return the result as an ungrouped data frame.\n\n\n\n\n\n\n\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 368 × 110\n# Groups:   day_of_week [7]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 7 × 2\n  day_of_week flight_count\n        &lt;dbl&gt;        &lt;int&gt;\n1           1         8853\n2           2         8505\n3           3         8561\n4           4         8829\n5           5         8864\n6           6         7167\n7           7         8637\n\n\n\n\n\n\n# A tibble: 59,416 × 110\n# Groups:   month, cancellation_code [46]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 46 × 3\n   month cancellation_code cancellation\n   &lt;dbl&gt; &lt;chr&gt;                    &lt;int&gt;\n 1     1 A                           10\n 2     1 B                           28\n 3     1 C                           19\n 4     1 D                            2\n 5     1 &lt;NA&gt;                      4247\n 6     2 A                           15\n 7     2 B                           30\n 8     2 C                            1\n 9     2 &lt;NA&gt;                      4016\n10     3 A                           18\n# ℹ 36 more rows\n\n\n\n\n\n\n# A tibble: 59,416 × 111\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 104 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 59,416 × 111\n# Groups:   reporting_airline, time_of_day [13]\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 104 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\n\n# A tibble: 13 × 4\n   reporting_airline time_of_day   average_delay on_time_rate\n   &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt;\n 1 9E                Early Morning         10.4         0.713\n 2 AA                Early Morning         16.8         0.677\n 3 AS                Early Morning          7.21        0.559\n 4 B6                Early Morning         27.9         0.502\n 5 DL                Early Morning         11.5         0.661\n 6 F9                Early Morning         19.7         0.589\n 7 MQ                Early Morning          5.73        0.709\n 8 NK                Early Morning         34.1         0.382\n 9 OH                Early Morning         13.0         0.774\n10 OO                Early Morning          1.42        0.788\n11 UA                Early Morning         13.2         0.658\n12 WN                Early Morning          9.35        0.546\n13 YX                Early Morning          1.72        0.841"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html",
    "href": "closereads/ggplot-story-flights.html",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This story explores flight delay pattern using visualizations built with ggplot2. Throughout the story, you’ll learn how to visualize data to uncover patterns in departure and arrival delays. By the end of this story, you should be able to craft visual narratives that are informative and visually appealing, providing you with a fundamental skill set critical in the field of data science.\n\n\nThis story uses data from flight arrival and departures for commercial flights across the USA. The data were originally curated for the American Statistical Association’s 2025 Data Expo. The data include information on departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays.\nIn this story you will work with a subset of these data, consisting of flights department from the Raleigh-Durham International Airport (RDU), in November 2023, headed to destinations in North Carolina and California. It includes key variables such as departure and arrival delays, destination airport codes, airline names, and dates of travel. The data have already been filtered and transformed for these features, in order to provide you with a focused and compelling narrative.\nThe packages we used in this tutorial for plotting include ggplot2 (which is distributed with the tidyverse meta package) and ggthemes.\nIn our visualization, we explore the relationship between departure delays (dep_delay) and arrival delays (arr_delay) for flights from RDU to destinations in North Carolina (NC) and California (CA). The data frame we’ll work with is called flights_rdu.\nThe story builds up to the following plot, which shows the relationship between departure and arrival delays.\n\n\nRows: 59416 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (27): reporting_airline, iata_code_reporting_airline, tail_number, orig...\ndbl  (57): year, quarter, month, day_of_month, day_of_week, dot_id_reporting...\nlgl  (25): div3airport, div3airport_id, div3airport_seq_id, div3wheels_on, d...\ndate  (1): flight_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nTo create this plot we will mao the variables to the appropriate aesthetic elements of the plot and customize and refine our visual with tools designed to enhance clarity and impact. The resulting plot is provided below, along with a full narrative on how it is constructed.\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “Destination state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal().\n\n\n\n\n\n\n\n\n\n\n\n\nBefore we start, let’s look at how to read the scrolly-telling story. As you progress through the narrative, you’ll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resulting visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code cell is highlighted to indicate exactly where and how these elements are integrated into the plot.\n\n\n\nScrolly-telling demonstration\n\n\n\n\n\n\nStart with the flights_rdu data frame.\n\nggplot(\n  data = flights_rdu, \n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(x = dep_delay)\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\nTypically, when using ggplot(), the arguments data and mapping are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows:\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state)\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal().\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#data",
    "href": "closereads/ggplot-story-flights.html#data",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This story uses data from flight arrival and departures for commercial flights across the USA. The data were originally curated for the American Statistical Association’s 2025 Data Expo. The data include information on departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays.\nIn this story you will work with a subset of these data, consisting of flights department from the Raleigh-Durham International Airport (RDU), in November 2023, headed to destinations in North Carolina and California. It includes key variables such as departure and arrival delays, destination airport codes, airline names, and dates of travel. The data have already been filtered and transformed for these features, in order to provide you with a focused and compelling narrative.\nThe packages we used in this tutorial for plotting include ggplot2 (which is distributed with the tidyverse meta package) and ggthemes.\nIn our visualization, we explore the relationship between departure delays (dep_delay) and arrival delays (arr_delay) for flights from RDU to destinations in North Carolina (NC) and California (CA). The data frame we’ll work with is called flights_rdu.\nThe story builds up to the following plot, which shows the relationship between departure and arrival delays.\n\n\nRows: 59416 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (27): reporting_airline, iata_code_reporting_airline, tail_number, orig...\ndbl  (57): year, quarter, month, day_of_month, day_of_week, dot_id_reporting...\nlgl  (25): div3airport, div3airport_id, div3airport_seq_id, div3wheels_on, d...\ndate  (1): flight_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#plot",
    "href": "closereads/ggplot-story-flights.html#plot",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "To create this plot we will mao the variables to the appropriate aesthetic elements of the plot and customize and refine our visual with tools designed to enhance clarity and impact. The resulting plot is provided below, along with a full narrative on how it is constructed.\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “Destination state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal()."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "href": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "Before we start, let’s look at how to read the scrolly-telling story. As you progress through the narrative, you’ll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resulting visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code cell is highlighted to indicate exactly where and how these elements are integrated into the plot.\n\n\n\nScrolly-telling demonstration\n\n\n\n\n\n\nStart with the flights_rdu data frame.\n\nggplot(\n  data = flights_rdu, \n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(x = dep_delay)\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\nTypically, when using ggplot(), the arguments data and mapping are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows:\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state)\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Arrival vs. departure delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure delay (min)” and “Arrival delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal().\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Arrival vs. departure delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure delay (min)\", \n    y = \"Arrival delay (min)\",\n    color = \"Destination state\",\n    caption = \"Source: 2025 ASA Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()"
  },
  {
    "objectID": "closereads/data-transformation-flights.html",
    "href": "closereads/data-transformation-flights.html",
    "title": "RDU Flights Data Transformation",
    "section": "",
    "text": "This section focuses on preparing the raw flight dataset for analysis through a series of data transformation steps. Using the dplyr package from the tidyverse, we demonstrate how to filter, select, rename, and mutate variables to clean and structure the data. These operations are essential for shaping the dataset into a form suitable for downstream analysis and visualization.\n\n\nThis project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays.\nAdapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/\n\n\n\nStarting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the ggplot closeread story.\n\n\n\n\nWe start by loading the tidyverse package, which contains the ggplot2 and dplyr packages we need.\n\n\n\n\nWe then load the data frame flights. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns.\n\n\n\n\nWe use the filter() function to retain only those rows in the data frame where Origin is “RDU”, DestState is either “NC” or “CA”, and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023.\n\n\n\n\nWe first filter the dataset to only include flights that departed from RDU. This reduces the data to only those flights originating from Raleigh-Durham International Airport. This initial filter reduces the number of rows from 59,416 to 7,937, keeping only flights with origin == \"RDU\".\n\n\n\n\nNext, we further narrow the dataset to include only those flights whose destinations are in North Carolina (NC) or California (CA). This ensures we are focusing on flights between RDU and a specific set of states. This reduces the dataset from 7,937 rows to 622.\n\n\n\n\nFinally, we filter the dataset by month, keeping only those flights that took place in November (month == 11). This restricts the dataset to a single month’s worth of data for focused analysis. This brings the final row count down from 622 to 368, giving us the subset of interest: RDU departures to NC or CA in November 2023.\n\n\n\n\nWhile we demonstrated the filtering process step by step to better understand the impact of each condition, it’s important to note that in practice, we typically apply all three filters in a single filter() call.\n\n\n\n\nWe want to select the variables that are used in the data visualization: dep_delay, arr_delay, dest_state, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6.\n\n\n\n\nWe can rename the variable dest_state to “destination_state” for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed.\n\n\n\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, |&gt;. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that’s easy to read and manage.\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\n\n\nlibrary(tidyverse)\nflights &lt;- read_csv(\"rdu-flights-23.csv\")\n\nflights # display the dataframe\n\n\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\"\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    dest_state %in% c(\"NC\", \"CA\")\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 4,553 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1           14           6 2023-01-14  AA               \n 2  2023       1     1           21           6 2023-01-21  AA               \n 3  2023       1     1           28           6 2023-01-28  AA               \n 4  2023       1     1            1           7 2023-01-01  AA               \n 5  2023       1     1            2           1 2023-01-02  AA               \n 6  2023       1     1            3           2 2023-01-03  AA               \n 7  2023       1     1            4           3 2023-01-04  AA               \n 8  2023       1     1            5           4 2023-01-05  AA               \n 9  2023       1     1            6           5 2023-01-06  AA               \n10  2023       1     1            7           6 2023-01-07  AA               \n# ℹ 4,543 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  filter(\n    month == 11\n  )\n\nflights_rdu\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay dest_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     \n 1 2023-11-01  LAX   AA                       -2         1 CA        \n 2 2023-11-02  LAX   AA                       -7       -22 CA        \n 3 2023-11-03  LAX   AA                       -4       -29 CA        \n 4 2023-11-04  LAX   AA                       -8       -27 CA        \n 5 2023-11-25  CLT   AA                       -4         3 NC        \n 6 2023-11-26  CLT   AA                       18        23 NC        \n 7 2023-11-01  CLT   AA                       -7        -8 NC        \n 8 2023-11-02  CLT   AA                       -7        -9 NC        \n 9 2023-11-03  CLT   AA                       47        29 NC        \n10 2023-11-04  CLT   AA                       19         5 NC        \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n\n\n\n\n\n\n\n\n\nIn the following section, we build on top of the current dataset and explore the utilization of two additional dplyr functions: arrange and relocate. arrange is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, relocate is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.\n\n\n\n\nThe relocate function is being used here to adjust the position of the destination_state column within the dataframe. By specifying .before = dep_delay, the function moves the destination_state column to a position immediately before the dep_delay column.\n\n\n\n\nThe arrange function is then utilized to sort the dataframe based on the dep_delay column in descending order. By using desc(dep_delay), it ensures that the entries with the longest departure delays are listed at the top of the data frame.\n\n\n\n\nNote that we can use the arrange function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by flight_date and secondarily by dep_delay, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time.\n\n\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  LAX   AA                CA                       -2         1\n 2 2023-11-02  LAX   AA                CA                       -7       -22\n 3 2023-11-03  LAX   AA                CA                       -4       -29\n 4 2023-11-04  LAX   AA                CA                       -8       -27\n 5 2023-11-25  CLT   AA                NC                       -4         3\n 6 2023-11-26  CLT   AA                NC                       18        23\n 7 2023-11-01  CLT   AA                NC                       -7        -8\n 8 2023-11-02  CLT   AA                NC                       -7        -9\n 9 2023-11-03  CLT   AA                NC                       47        29\n10 2023-11-04  CLT   AA                NC                       19         5\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-09  LAX   AA                CA                      209       215\n 2 2023-11-19  CLT   AA                NC                      174       166\n 3 2023-11-21  CLT   AA                NC                      166       159\n 4 2023-11-22  CLT   AA                NC                      150       144\n 5 2023-11-29  CLT   AA                NC                      137       146\n 6 2023-11-29  CLT   AA                NC                      102        98\n 7 2023-11-25  CLT   AA                NC                       78        72\n 8 2023-11-30  LAX   AA                CA                       72        62\n 9 2023-11-22  CLT   AA                NC                       71        57\n10 2023-11-07  CLT   AA                NC                       71        60\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    flight_date, desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n\n\n\n\n\n\n\n\n\nWe now explore the use of the mutate() function from dplyr, which is used to create or transform variables in a data frame. We’ll demonstrate two common use cases:\n\nderiving new values using functions (e.g., extracting the day of the week), and\ncreating categorical labels using logical conditions (e.g., classifying flight delays).\n\n\n\n\n\nBuilding on top of the dataset we obtained from preivous steps, we first use mutate() to create a new column, day_of_week, derived from flight_date. The wday() function from the lubridate package returns the day of the week as a factor, with labels like “Mon”, “Tue”, etc.\n\n\n\n\nWe can also use mutate() to add a variable that classifies departure delays using ifelse(). In this case, we label flights as “On time or Early” if dep_delay &lt;= 0, and “Delayed” otherwise.\n\n\n\n\nFor more complex logic, case_when() is useful. Here, we categorize departure delays into multiple cases:\n\n“Early” for negative delays,\n“On Time” for 0-minute delay,\n“Minor Delay” for delays up to 15 minutes, and\n“Major Delay” for delays greater than 15 minutes.\n\n\n\n\n\nAgain, we typically apply all three filters in a single mutate() call.\n\n\n\n\n\n\n\nlibrary(lubridate)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: day_of_week &lt;ord&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\")\n  )\n\nflights_rdu\n\n# A tibble: 368 × 8\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 2 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE),\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\"),\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#data",
    "href": "closereads/data-transformation-flights.html#data",
    "title": "RDU Flights Data Transformation",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays.\nAdapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#recreating-the-dataframe-used-in-the-ggplot-story",
    "href": "closereads/data-transformation-flights.html#recreating-the-dataframe-used-in-the-ggplot-story",
    "title": "RDU Flights Data Transformation",
    "section": "",
    "text": "Starting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the ggplot closeread story.\n\n\n\n\nWe start by loading the tidyverse package, which contains the ggplot2 and dplyr packages we need.\n\n\n\n\nWe then load the data frame flights. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns.\n\n\n\n\nWe use the filter() function to retain only those rows in the data frame where Origin is “RDU”, DestState is either “NC” or “CA”, and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023.\n\n\n\n\nWe first filter the dataset to only include flights that departed from RDU. This reduces the data to only those flights originating from Raleigh-Durham International Airport. This initial filter reduces the number of rows from 59,416 to 7,937, keeping only flights with origin == \"RDU\".\n\n\n\n\nNext, we further narrow the dataset to include only those flights whose destinations are in North Carolina (NC) or California (CA). This ensures we are focusing on flights between RDU and a specific set of states. This reduces the dataset from 7,937 rows to 622.\n\n\n\n\nFinally, we filter the dataset by month, keeping only those flights that took place in November (month == 11). This restricts the dataset to a single month’s worth of data for focused analysis. This brings the final row count down from 622 to 368, giving us the subset of interest: RDU departures to NC or CA in November 2023.\n\n\n\n\nWhile we demonstrated the filtering process step by step to better understand the impact of each condition, it’s important to note that in practice, we typically apply all three filters in a single filter() call.\n\n\n\n\nWe want to select the variables that are used in the data visualization: dep_delay, arr_delay, dest_state, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6.\n\n\n\n\nWe can rename the variable dest_state to “destination_state” for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed.\n\n\n\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, |&gt;. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that’s easy to read and manage.\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\n\n\nlibrary(tidyverse)\nflights &lt;- read_csv(\"rdu-flights-23.csv\")\n\nflights # display the dataframe\n\n\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\"\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    dest_state %in% c(\"NC\", \"CA\")\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 4,553 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1           14           6 2023-01-14  AA               \n 2  2023       1     1           21           6 2023-01-21  AA               \n 3  2023       1     1           28           6 2023-01-28  AA               \n 4  2023       1     1            1           7 2023-01-01  AA               \n 5  2023       1     1            2           1 2023-01-02  AA               \n 6  2023       1     1            3           2 2023-01-03  AA               \n 7  2023       1     1            4           3 2023-01-04  AA               \n 8  2023       1     1            5           4 2023-01-05  AA               \n 9  2023       1     1            6           5 2023-01-06  AA               \n10  2023       1     1            7           6 2023-01-07  AA               \n# ℹ 4,543 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  filter(\n    month == 11\n  )\n\nflights_rdu\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay dest_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     \n 1 2023-11-01  LAX   AA                       -2         1 CA        \n 2 2023-11-02  LAX   AA                       -7       -22 CA        \n 3 2023-11-03  LAX   AA                       -4       -29 CA        \n 4 2023-11-04  LAX   AA                       -8       -27 CA        \n 5 2023-11-25  CLT   AA                       -4         3 NC        \n 6 2023-11-26  CLT   AA                       18        23 NC        \n 7 2023-11-01  CLT   AA                       -7        -8 NC        \n 8 2023-11-02  CLT   AA                       -7        -9 NC        \n 9 2023-11-03  CLT   AA                       47        29 NC        \n10 2023-11-04  CLT   AA                       19         5 NC        \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#other-functions-arrange-relocate",
    "href": "closereads/data-transformation-flights.html#other-functions-arrange-relocate",
    "title": "RDU Flights Data Transformation",
    "section": "",
    "text": "In the following section, we build on top of the current dataset and explore the utilization of two additional dplyr functions: arrange and relocate. arrange is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, relocate is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.\n\n\n\n\nThe relocate function is being used here to adjust the position of the destination_state column within the dataframe. By specifying .before = dep_delay, the function moves the destination_state column to a position immediately before the dep_delay column.\n\n\n\n\nThe arrange function is then utilized to sort the dataframe based on the dep_delay column in descending order. By using desc(dep_delay), it ensures that the entries with the longest departure delays are listed at the top of the data frame.\n\n\n\n\nNote that we can use the arrange function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by flight_date and secondarily by dep_delay, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time.\n\n\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  LAX   AA                CA                       -2         1\n 2 2023-11-02  LAX   AA                CA                       -7       -22\n 3 2023-11-03  LAX   AA                CA                       -4       -29\n 4 2023-11-04  LAX   AA                CA                       -8       -27\n 5 2023-11-25  CLT   AA                NC                       -4         3\n 6 2023-11-26  CLT   AA                NC                       18        23\n 7 2023-11-01  CLT   AA                NC                       -7        -8\n 8 2023-11-02  CLT   AA                NC                       -7        -9\n 9 2023-11-03  CLT   AA                NC                       47        29\n10 2023-11-04  CLT   AA                NC                       19         5\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-09  LAX   AA                CA                      209       215\n 2 2023-11-19  CLT   AA                NC                      174       166\n 3 2023-11-21  CLT   AA                NC                      166       159\n 4 2023-11-22  CLT   AA                NC                      150       144\n 5 2023-11-29  CLT   AA                NC                      137       146\n 6 2023-11-29  CLT   AA                NC                      102        98\n 7 2023-11-25  CLT   AA                NC                       78        72\n 8 2023-11-30  LAX   AA                CA                       72        62\n 9 2023-11-22  CLT   AA                NC                       71        57\n10 2023-11-07  CLT   AA                NC                       71        60\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    flight_date, desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#one-more-function-mutate",
    "href": "closereads/data-transformation-flights.html#one-more-function-mutate",
    "title": "RDU Flights Data Transformation",
    "section": "",
    "text": "We now explore the use of the mutate() function from dplyr, which is used to create or transform variables in a data frame. We’ll demonstrate two common use cases:\n\nderiving new values using functions (e.g., extracting the day of the week), and\ncreating categorical labels using logical conditions (e.g., classifying flight delays).\n\n\n\n\n\nBuilding on top of the dataset we obtained from preivous steps, we first use mutate() to create a new column, day_of_week, derived from flight_date. The wday() function from the lubridate package returns the day of the week as a factor, with labels like “Mon”, “Tue”, etc.\n\n\n\n\nWe can also use mutate() to add a variable that classifies departure delays using ifelse(). In this case, we label flights as “On time or Early” if dep_delay &lt;= 0, and “Delayed” otherwise.\n\n\n\n\nFor more complex logic, case_when() is useful. Here, we categorize departure delays into multiple cases:\n\n“Early” for negative delays,\n“On Time” for 0-minute delay,\n“Minor Delay” for delays up to 15 minutes, and\n“Major Delay” for delays greater than 15 minutes.\n\n\n\n\n\nAgain, we typically apply all three filters in a single mutate() call.\n\n\n\n\n\n\n\nlibrary(lubridate)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: day_of_week &lt;ord&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\")\n  )\n\nflights_rdu\n\n# A tibble: 368 × 8\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 2 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE),\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\"),\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;"
  }
]