[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data science closereads",
    "section": "",
    "text": "Visualizing RDU flights\n\n\nAdd a description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlights Data Transformation Example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlights data joining other datasets example\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "closereads/join-flights.html",
    "href": "closereads/join-flights.html",
    "title": "Flights data joining other datasets example",
    "section": "",
    "text": "Adapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/\nWeather data from: https://www.wunderground.com/history/monthly/us/nc/durham/KRDU/date/2023-11"
  },
  {
    "objectID": "closereads/join-flights.html#lookup-table",
    "href": "closereads/join-flights.html#lookup-table",
    "title": "Flights data joining other datasets example",
    "section": "Lookup table",
    "text": "Lookup table\nThe first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an airline_codes table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\nBefore we start, below is what the airline_codes table looks like:\n\n\n# A tibble: 33 × 2\n   code  description                       \n   &lt;chr&gt; &lt;chr&gt;                             \n 1 9E    Endeavor Air Inc.                 \n 2 AA    American Airlines Inc.            \n 3 AS    Alaska Airlines Inc.              \n 4 B6    JetBlue Airways                   \n 5 CO    Continental Air Lines Inc.        \n 6 DH    Independence Air                  \n 7 DL    Delta Air Lines Inc.              \n 8 EA    Eastern Air Lines Inc.            \n 9 EV    ExpressJet Airlines LLC d/b/a aha!\n10 F9    Frontier Airlines Inc.            \n# ℹ 23 more rows\n\n\n\n\n\n\nWe use a left_join function from the dplyr package to merge the flights_rdu data frame with the airline_codes lookup table. It includes all records from the ‘left’ table (the flights_rdu table being passed down the pipeline), and the matched records from the ‘right’ table (airline_codes). If there is no match, the result is still a row in the output, but with NULL values in the columns of the ‘right’ table.\n\n\n\n\nThis operation is based on matching the reporting_airline column from the flights_rdu dataframe with the code column in the airline_codes table. This type of join ensures that all records from the flights_rdu data frame are preserved, and corresponding airline names are added where available. The number of rows remains the same at 368, while the number of columns increases—from 9 to 10 after adding new airline description fields.\n\n\n\n\nNote that after merging, we use the rename function to change the column name from description to airline_name, and move airline_name after reporting_airline using relocate, enhancing the readability of the dataframe. \n\n\n\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  )\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |&gt;\n  rename(\n    airline_name = description\n  ) |&gt;\n  relocate(\n    airline_name, .after = reporting_airline\n  )\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;                 &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay &lt;dbl&gt;\n\n\n\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = join_by(reporting_airline == code)\n  ) |&gt;\n  rename(\n    airline_name = description\n  ) |&gt;\n  relocate(\n    airline_name, .after = reporting_airline\n  )\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline airline_name  destination_state dep_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;         &lt;chr&gt;                 &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                American Air… NC                       58\n 2 2023-11-01  CLT   AA                American Air… NC                       20\n 3 2023-11-01  LAX   DL                Delta Air Li… CA                       16\n 4 2023-11-01  CLT   AA                American Air… NC                        0\n 5 2023-11-01  CLT   AA                American Air… NC                       -1\n 6 2023-11-01  CLT   AA                American Air… NC                       -1\n 7 2023-11-01  LAX   AA                American Air… CA                       -2\n 8 2023-11-01  SFO   UA                United Air L… CA                       -2\n 9 2023-11-01  CLT   AA                American Air… NC                       -4\n10 2023-11-01  CLT   AA                American Air… NC                       -5\n# ℹ 358 more rows\n# ℹ 1 more variable: arr_delay &lt;dbl&gt;"
  },
  {
    "objectID": "closereads/join-flights.html#finding-unmatched-codes-using-anti_join",
    "href": "closereads/join-flights.html#finding-unmatched-codes-using-anti_join",
    "title": "Flights data joining other datasets example",
    "section": "Finding unmatched codes using anti_join",
    "text": "Finding unmatched codes using anti_join\nIn some cases, it’s useful to identify which values from one dataset do not appear in another. For example, we might want to know which carriers listed in our airline_codes lookup table did not operate any flights in our filtered flights_rdu dataset.\nWe can do this using anti_join(). It is a a join operation that returns all rows from the first (left) table that do not have a match in the second (right) table.\n\n\n\n\nHere, we apply anti_join() to the airline_codes table using flights_rdu as the reference. The result is a list of carriers that are defined in the lookup table but are not present in our filtered flight data. The number of rows in the output indicates how many codes were not used.\n\n\n\n\n\n\n\nunused_airlines &lt;- airline_codes |&gt;\n  anti_join(\n    flights_rdu,\n    by = join_by(code == reporting_airline)\n  )\n\nunused_airlines\n\n# A tibble: 30 × 2\n   code  description                       \n   &lt;chr&gt; &lt;chr&gt;                             \n 1 9E    Endeavor Air Inc.                 \n 2 AS    Alaska Airlines Inc.              \n 3 B6    JetBlue Airways                   \n 4 CO    Continental Air Lines Inc.        \n 5 DH    Independence Air                  \n 6 EA    Eastern Air Lines Inc.            \n 7 EV    ExpressJet Airlines LLC d/b/a aha!\n 8 F9    Frontier Airlines Inc.            \n 9 FL    AirTran Airways Corporation       \n10 G4    Allegiant Air                     \n# ℹ 20 more rows"
  },
  {
    "objectID": "closereads/join-flights.html#enriching-dataframe-by-joining-another-table",
    "href": "closereads/join-flights.html#enriching-dataframe-by-joining-another-table",
    "title": "Flights data joining other datasets example",
    "section": "Enriching dataframe by joining another table",
    "text": "Enriching dataframe by joining another table\nFor this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The weather_df data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023. The dateset is displayed below. Notice that the weather data for 2023-11-02 is missing.\n\n\n         time temperature dew_point humidity wind_speed pressure precipitation\n1  2023-11-01        43.8      29.6     58.7        9.6     30.0          0.06\n2  2023-11-03        45.0      29.8     64.8        2.4     30.0          0.00\n3  2023-11-04        50.7      29.1     65.3        1.3     29.8          0.00\n4  2023-11-05        55.4      39.9     73.2        3.9     29.7          0.00\n5  2023-11-06        59.7      43.7     75.3        7.4     29.7          0.00\n6  2023-11-07        64.4      47.0     65.7        9.3     29.7          0.00\n7  2023-11-08        65.2      50.6     63.6        7.6     29.7          0.00\n8  2023-11-09        69.0      55.6     73.9       10.6     29.7          0.00\n9  2023-11-10        59.6      42.5     53.8        6.8     29.7          0.00\n10 2023-11-11        52.5      40.9     65.1        7.2     29.9          0.01\n11 2023-11-12        53.4      38.9     59.8        9.1     30.0          0.01\n12 2023-11-13        48.8      37.7     64.1        5.1     30.0          0.00\n13 2023-11-14        51.4      31.6     52.9        5.4     29.9          0.00\n14 2023-11-15        51.0      36.5     58.7        4.3     30.0          0.00\n15 2023-11-16        56.9      44.2     65.0        5.4     30.0          0.00\n16 2023-11-17        61.8      52.8     73.2        3.9     29.7          0.00\n17 2023-11-18        63.5      47.6     73.7        5.8     29.6          0.00\n18 2023-11-19        48.7      29.7     51.3        3.5     29.5          0.00\n19 2023-11-20        50.9      33.2     55.1        7.7     29.9          0.00\n20 2023-11-21        58.2      54.0     86.1       10.4     29.9          0.00\n21 2023-11-22        59.7      53.3     80.7        7.2     29.5          1.38\n22 2023-11-23        48.3      36.2     64.8        5.6     29.7          0.04\n23 2023-11-24        45.8      38.5     77.6        5.6     29.8          0.00\n24 2023-11-25        44.0      28.5     54.0        7.4     29.8          0.00\n25 2023-11-26        45.2      36.3     71.4        6.6     29.8          0.00\n26 2023-11-27        48.5      34.7     68.6        6.1     29.6          0.05\n27 2023-11-28        39.2      18.3     45.6        3.2     29.9          0.00\n28 2023-11-29        35.8      14.3     43.5        7.0     29.9          0.00\n29 2023-11-30        45.9      26.0     48.3        6.6     29.8          0.00\n\n\n\n\n\n\nWe use a right_join to combine flights_rdu with weather_data. The join is based on matching flight_date in the flights data with time in the weather data. This ensures that all dates present in the weather_data dataset are retained, along with corresponding flight information when available.\n\n\n\n\nAfter performing the right_join, the resulting dataset changes from 368 rows and 10 columns to 355 rows and 15 columns. The increase in columns comes from the additional weather-related variables—such as temperature, humidity, wind speed, and precipitation—added from the weather_data table. The decrease in rows occurs because the flight date 2023-11-02 in flights_rdu did not have matching weather records, and since a right_join only keeps rows where the key exists in the right-hand table (weather_data), those unmatched flight rows are dropped.\n\n\n\n\n\n\n\nflights_rdu_joined_weather &lt;- flights_rdu |&gt;\n  right_join(\n    weather_data, \n    by = join_by(flight_date == time)\n  ) \n\n\n\n\n\n# A tibble: 355 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 345 more rows\n# ℹ 6 more variables: temperature &lt;dbl&gt;, dew_point &lt;dbl&gt;, humidity &lt;dbl&gt;,\n#   wind_speed &lt;dbl&gt;, pressure &lt;dbl&gt;, precipitation &lt;dbl&gt;"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html",
    "href": "closereads/ggplot-story-flights.html",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#introduction",
    "href": "closereads/ggplot-story-flights.html#introduction",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#data",
    "href": "closereads/ggplot-story-flights.html#data",
    "title": "Visualizing RDU flights",
    "section": "Data",
    "text": "Data\nIn this tutorial, we’ll focus specifically on the flights departing from Raleigh-Durham International Airport (RDU) and heading to destinations in North Carolina and California. You’ll learn how to visualize data to uncover patterns in departure and arrival delays. By the end of this tutorial, you should be able to craft visual narratives that are informative and visually appealing, providing you with a fundamental skill set critical in the field of data science.\nThe packages we used in this tutorial for plotting include ggplot2 and ggthemes.\nIn our visualization, we explore the relationship between departure delays (dep_delay) and arrival delays (arr_delay) for flights from Raleigh-Durham International Airport (RDU) to destinations in North Carolina and California. The graph you will learn to create visually compares the length of departure delays to arrival delays.\n\n\nRows: 59416 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (27): reporting_airline, iata_code_reporting_airline, tail_number, orig...\ndbl  (57): year, quarter, month, day_of_month, day_of_week, dot_id_reporting...\nlgl  (25): div3airport, div3airport_id, div3airport_seq_id, div3wheels_on, d...\ndate  (1): flight_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#plot",
    "href": "closereads/ggplot-story-flights.html#plot",
    "title": "Visualizing RDU flights",
    "section": "Plot",
    "text": "Plot\nWe’ll start by loading our data, then move on to constructing our plot using ggplot2. This will involve mapping our variables to the appropriate axes, customizing the aesthetic elements of our plot, and refining our visual with tools designed to enhance clarity and impact. The resultant plot is provided below, along with a full narrative on how it is constructed.\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal()."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "href": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "title": "Visualizing RDU flights",
    "section": "How to read the scrolly-telling story",
    "text": "How to read the scrolly-telling story\nBefore we start, let’s look at how to read the scrolly-telling story. As you progress through the narrative, you’ll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resultant visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code chunk is highlighted to indicate exactly where and how these elements are integrated into the plot.\n\n\n\nScrolly-telling demonstration\n\n\n\n\n\n\nStart with the flights_rdu data frame.\n\nggplot(\n  data = flights_rdu, \n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(x = dep_delay)\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis.\n\nggplot(\n  data = flights_rdu, \n  mapping = aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\nTypically, when using ggplot(), the arguments data and mapping are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows:\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state)\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  )\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness.\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind()\n\n\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal().\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#reflection",
    "href": "closereads/ggplot-story-flights.html#reflection",
    "title": "Visualizing RDU flights",
    "section": "Reflection",
    "text": "Reflection\nIn this demonstration, you explored how to create a ggplot using the RDU flights dataset. As we wrap up, take a moment to reflect on and note down what you’ve learned from this example:"
  },
  {
    "objectID": "closereads/data-transformation-flights.html",
    "href": "closereads/data-transformation-flights.html",
    "title": "Flights Data Transformation Example",
    "section": "",
    "text": "Adapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/\n\nRecreating the dataframe used in the ggplot story\nStarting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the ggplot closeread story.\n\n\n\n\nWe start by loading the tidyverse package, which contains the ggplot2 and dplyr packages we need.\n\n\n\n\nWe then load the data frame flights. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns.\n\n\n\n\nWe use the filter() function to retain only those rows in the data frame where Origin is “RDU”, DestState is either “NC” or “CA”, and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023.\n\n\n\n\nWe first filter the dataset to only include flights that departed from RDU. This reduces the data to only those flights originating from Raleigh-Durham International Airport. This initial filter reduces the number of rows from 59,416 to 7,937, keeping only flights with origin == \"RDU\".\n\n\n\n\nNext, we further narrow the dataset to include only those flights whose destinations are in North Carolina (NC) or California (CA). This ensures we are focusing on flights between RDU and a specific set of states. This reduces the dataset from 7,937 rows to 622.\n\n\n\n\nFinally, we filter the dataset by month, keeping only those flights that took place in November (month == 11). This restricts the dataset to a single month’s worth of data for focused analysis. This brings the final row count down from 622 to 368, giving us the subset of interest: RDU departures to NC or CA in November 2023.\n\n\n\n\nWhile we demonstrated the filtering process step by step to better understand the impact of each condition, it’s important to note that in practice, we typically apply all three filters in a single filter() call.\n\n\n\n\nWe want to select the variables that are used in the data visualization: dep_delay, arr_delay, dest_state, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6.\n\n\n\n\nWe can rename the variable dest_state to “destination_state” for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed.\n\n\n\n\nThe main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, |&gt;. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that’s easy to read and manage.\n\n\n\n\n\n\n\nlibrary(tidyverse)\n\n\n\n\nlibrary(tidyverse)\nflights &lt;- read_csv(\"rdu-flights-23.csv\")\n\nflights # display the dataframe\n\n\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\"\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 59,416 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1            9           1 2023-01-09  9E               \n 2  2023       1     1           10           2 2023-01-10  9E               \n 3  2023       1     1           11           3 2023-01-11  9E               \n 4  2023       1     1           12           4 2023-01-12  9E               \n 5  2023       1     1           13           5 2023-01-13  9E               \n 6  2023       1     1           14           6 2023-01-14  9E               \n 7  2023       1     1           15           7 2023-01-15  9E               \n 8  2023       1     1           16           1 2023-01-16  9E               \n 9  2023       1     1           17           2 2023-01-17  9E               \n10  2023       1     1           18           3 2023-01-18  9E               \n# ℹ 59,406 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    dest_state %in% c(\"NC\", \"CA\")\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 4,553 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       1     1           14           6 2023-01-14  AA               \n 2  2023       1     1           21           6 2023-01-21  AA               \n 3  2023       1     1           28           6 2023-01-28  AA               \n 4  2023       1     1            1           7 2023-01-01  AA               \n 5  2023       1     1            2           1 2023-01-02  AA               \n 6  2023       1     1            3           2 2023-01-03  AA               \n 7  2023       1     1            4           3 2023-01-04  AA               \n 8  2023       1     1            5           4 2023-01-05  AA               \n 9  2023       1     1            6           5 2023-01-06  AA               \n10  2023       1     1            7           6 2023-01-07  AA               \n# ℹ 4,543 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  filter(\n    month == 11\n  )\n\nflights_rdu\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 110\n    year quarter month day_of_month day_of_week flight_date reporting_airline\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt; &lt;date&gt;      &lt;chr&gt;            \n 1  2023       4    11            1           3 2023-11-01  AA               \n 2  2023       4    11            2           4 2023-11-02  AA               \n 3  2023       4    11            3           5 2023-11-03  AA               \n 4  2023       4    11            4           6 2023-11-04  AA               \n 5  2023       4    11           25           6 2023-11-25  AA               \n 6  2023       4    11           26           7 2023-11-26  AA               \n 7  2023       4    11            1           3 2023-11-01  AA               \n 8  2023       4    11            2           4 2023-11-02  AA               \n 9  2023       4    11            3           5 2023-11-03  AA               \n10  2023       4    11            4           6 2023-11-04  AA               \n# ℹ 358 more rows\n# ℹ 103 more variables: dot_id_reporting_airline &lt;dbl&gt;,\n#   iata_code_reporting_airline &lt;chr&gt;, tail_number &lt;chr&gt;,\n#   flight_number_reporting_airline &lt;dbl&gt;, origin_airport_id &lt;dbl&gt;,\n#   origin_airport_seq_id &lt;dbl&gt;, origin_city_market_id &lt;dbl&gt;, origin &lt;chr&gt;,\n#   origin_city_name &lt;chr&gt;, origin_state &lt;chr&gt;, origin_state_fips &lt;dbl&gt;,\n#   origin_state_name &lt;chr&gt;, origin_wac &lt;dbl&gt;, dest_airport_id &lt;dbl&gt;, …\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay dest_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     \n 1 2023-11-01  LAX   AA                       -2         1 CA        \n 2 2023-11-02  LAX   AA                       -7       -22 CA        \n 3 2023-11-03  LAX   AA                       -4       -29 CA        \n 4 2023-11-04  LAX   AA                       -8       -27 CA        \n 5 2023-11-25  CLT   AA                       -4         3 NC        \n 6 2023-11-26  CLT   AA                       18        23 NC        \n 7 2023-11-01  CLT   AA                       -7        -8 NC        \n 8 2023-11-02  CLT   AA                       -7        -9 NC        \n 9 2023-11-03  CLT   AA                       47        29 NC        \n10 2023-11-04  CLT   AA                       19         5 NC        \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu # display the dataframe\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n\n\n\n\n\nlibrary(tidyverse)\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline dep_delay arr_delay destination_state\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;            \n 1 2023-11-01  LAX   AA                       -2         1 CA               \n 2 2023-11-02  LAX   AA                       -7       -22 CA               \n 3 2023-11-03  LAX   AA                       -4       -29 CA               \n 4 2023-11-04  LAX   AA                       -8       -27 CA               \n 5 2023-11-25  CLT   AA                       -4         3 NC               \n 6 2023-11-26  CLT   AA                       18        23 NC               \n 7 2023-11-01  CLT   AA                       -7        -8 NC               \n 8 2023-11-02  CLT   AA                       -7        -9 NC               \n 9 2023-11-03  CLT   AA                       47        29 NC               \n10 2023-11-04  CLT   AA                       19         5 NC               \n# ℹ 358 more rows\n\n\n\n\n\n\n\n\nOther functions: arrange, relocate\nIn the following section, we build on top of the current dataset and explore the utilization of two additional dplyr functions: arrange and relocate. arrange is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, relocate is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.\n\n\n\n\nThe relocate function is being used here to adjust the position of the destination_state column within the dataframe. By specifying .before = dep_delay, the function moves the destination_state column to a position immediately before the dep_delay column.\n\n\n\n\nThe arrange function is then utilized to sort the dataframe based on the dep_delay column in descending order. By using desc(dep_delay), it ensures that the entries with the longest departure delays are listed at the top of the data frame.\n\n\n\n\nNote that we can use the arrange function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by flight_date and secondarily by dep_delay, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time.\n\n\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  LAX   AA                CA                       -2         1\n 2 2023-11-02  LAX   AA                CA                       -7       -22\n 3 2023-11-03  LAX   AA                CA                       -4       -29\n 4 2023-11-04  LAX   AA                CA                       -8       -27\n 5 2023-11-25  CLT   AA                NC                       -4         3\n 6 2023-11-26  CLT   AA                NC                       18        23\n 7 2023-11-01  CLT   AA                NC                       -7        -8\n 8 2023-11-02  CLT   AA                NC                       -7        -9\n 9 2023-11-03  CLT   AA                NC                       47        29\n10 2023-11-04  CLT   AA                NC                       19         5\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-09  LAX   AA                CA                      209       215\n 2 2023-11-19  CLT   AA                NC                      174       166\n 3 2023-11-21  CLT   AA                NC                      166       159\n 4 2023-11-22  CLT   AA                NC                      150       144\n 5 2023-11-29  CLT   AA                NC                      137       146\n 6 2023-11-29  CLT   AA                NC                      102        98\n 7 2023-11-25  CLT   AA                NC                       78        72\n 8 2023-11-30  LAX   AA                CA                       72        62\n 9 2023-11-22  CLT   AA                NC                       71        57\n10 2023-11-07  CLT   AA                NC                       71        60\n# ℹ 358 more rows\n\n\n\n\n\n# add arrange and relocate at the end\n\nflights_rdu &lt;- flights |&gt;\n  filter(\n    origin == \"RDU\",\n    dest_state %in% c(\"NC\", \"CA\"), # NC and CA\n    month == 11\n  ) |&gt;\n  select(\n    flight_date,\n    dest,\n    reporting_airline,\n    dep_delay,\n    arr_delay,\n    dest_state\n  ) |&gt;\n  rename(\n    destination_state = dest_state\n  ) |&gt;\n  relocate(\n    destination_state, .before = dep_delay\n  ) |&gt;\n  arrange(\n    flight_date, desc(dep_delay)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 6\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n\n\n\n\n\n\n\n\nmutate\nWe now explore the use of the mutate() function from dplyr, which is used to create or transform variables in a data frame. We’ll demonstrate two common use cases:\n\nderiving new values using functions (e.g., extracting the day of the week), and\ncreating categorical labels using logical conditions (e.g., classifying flight delays).\n\n\n\n\n\nBuilding on top of the dataset we obtained from preivous steps, we first use mutate() to create a new column, day_of_week, derived from flight_date. The wday() function from the lubridate package returns the day of the week as a factor, with labels like “Mon”, “Tue”, etc.\n\n\n\n\nWe can also use mutate() to add a variable that classifies departure delays using ifelse(). In this case, we label flights as “On time or Early” if dep_delay &lt;= 0, and “Delayed” otherwise.\n\n\n\n\nFor more complex logic, case_when() is useful. Here, we categorize departure delays into multiple cases:\n\n“Early” for negative delays,\n“On Time” for 0-minute delay,\n“Minor Delay” for delays up to 15 minutes, and\n“Major Delay” for delays greater than 15 minutes.\n\n\n\n\n\nAgain, we typically apply all three filters in a single mutate() call.\n\n\n\n\n\n\n\nlibrary(lubridate)\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE)\n  )\n\nflights_rdu\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: day_of_week &lt;ord&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\")\n  )\n\nflights_rdu\n\n# A tibble: 368 × 8\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 2 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;\n\n\n\n\n\nflights_rdu &lt;- flights_rdu |&gt;\n  mutate(\n    day_of_week = wday(flight_date, label = TRUE),\n    delay_status = ifelse(dep_delay &lt;= 0, \"On time or Early\", \"Delayed\"),\n    delay_category = case_when(\n      dep_delay &lt; 0 ~ \"Early\",\n      dep_delay == 0 ~ \"On Time\",\n      dep_delay &lt;= 15 ~ \"Minor Delay\",\n      dep_delay &gt; 15 ~ \"Major Delay\"\n    )\n  )\n\nflights_rdu\n\n# A tibble: 368 × 9\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 3 more variables: day_of_week &lt;ord&gt;, delay_status &lt;chr&gt;,\n#   delay_category &lt;chr&gt;"
  }
]