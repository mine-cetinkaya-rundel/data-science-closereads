[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data science closereads",
    "section": "",
    "text": "Visualizing RDU flights\n\n\nAdd a description\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlights Data Transformation Example\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html",
    "href": "closereads/ggplot-story-flights.html",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#introduction",
    "href": "closereads/ggplot-story-flights.html#introduction",
    "title": "Visualizing RDU flights",
    "section": "",
    "text": "This project uses a dataset from the American Statistical Association’s Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#data",
    "href": "closereads/ggplot-story-flights.html#data",
    "title": "Visualizing RDU flights",
    "section": "Data",
    "text": "Data\nIn this tutorial, we’ll focus specifically on the flights departing from Raleigh-Durham International Airport (RDU) and heading to destinations in North Carolina and California. You’ll learn how to visualize data to uncover patterns in departure and arrival delays. By the end of this tutorial, you should be able to craft visual narratives that are informative and visually appealing, providing you with a fundamental skill set critical in the field of data science.\nThe packages we used in this tutorial for plotting include ggplot2 and ggthemes.\nIn our visualization, we explore the relationship between departure delays (dep_delay) and arrival delays (arr_delay) for flights from Raleigh-Durham International Airport (RDU) to destinations in North Carolina and California. The graph you will learn to create visually compares the length of departure delays to arrival delays.\n\n\nRows: 59416 Columns: 110\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (27): reporting_airline, iata_code_reporting_airline, tail_number, orig...\ndbl  (57): year, quarter, month, day_of_month, day_of_week, dot_id_reporting...\nlgl  (25): div3airport, div3airport_id, div3airport_seq_id, div3wheels_on, d...\ndate  (1): flight_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#plot",
    "href": "closereads/ggplot-story-flights.html#plot",
    "title": "Visualizing RDU flights",
    "section": "Plot",
    "text": "Plot\nWe’ll start by loading our data, then move on to constructing our plot using ggplot2. This will involve mapping our variables to the appropriate axes, customizing the aesthetic elements of our plot, and refining our visual with tools designed to enhance clarity and impact. The resultant plot is provided below, along with a full narrative on how it is constructed.\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal()."
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "href": "closereads/ggplot-story-flights.html#how-to-read-the-scrolly-telling-story",
    "title": "Visualizing RDU flights",
    "section": "How to read the scrolly-telling story",
    "text": "How to read the scrolly-telling story\nBefore we start, let’s look at how to read the scrolly-telling story. As you progress through the narrative, you’ll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resultant visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code chunk is highlighted to indicate exactly where and how these elements are integrated into the plot.\n\n\n\nScrolly-telling demonstration\n\n\n\n\n\n\nStart with the flights_rdu data frame. ::: {.cell}\nggplot(\n  data = flights_rdu, \n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis. ::: {.cell}\nggplot(\n  data = flights_rdu, \n  mapping = aes(x = dep_delay)\n)\n\n::: :::{#cr-plot-2} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-3” highlight=“3-6”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. ::: {.cell}\nggplot(\n  data = flights_rdu, \n  mapping = aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n::: Typically, when using ggplot(), the arguments data and mapping are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows: ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay,\n    y = arr_delay\n  )\n)\n::: ::: :::{#cr-plot-3} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point()\n\n::: :::{#cr-plot-4} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state)\n  )\n\n::: :::{#cr-plot-5} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-6” highlight=“10”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  )\n::: ::: :::{#cr-plot-6} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\"\n  )\n\n::: :::{#cr-plot-7} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-8” highlight=“14”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\"\n  )\n::: ::: :::{#cr-plot-8} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n:::\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\"\n  )\n\n:::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\"\n  )\n\n:::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n\nStart with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  )\n\n::: :::{#cr-plot-11} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-12” highlight=“20”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind()\n::: ::: :::{#cr-plot-12} ::: {.cell} ::: {.cell-output-display}  ::: :::\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n::: :::{focus-on=“cr-plot-13” highlight=“21”} Start with the flights_rdu data frame. Map dep_delay to the x-axis and map arr_delay to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot “Departure Delay and Arrival Delay”, add the subtitle “Flights from RDU to NC and CA”, label the x and y axes as “Departure Delay (min)” and “Arrival Delay (min)”, respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using theme_minimal(). ::: {.cell}\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n::: :::\n\n\n\n\n\n\n\n\n\n\n\nggplot(\n  flights_rdu, \n  aes(\n    x = dep_delay, \n    y = arr_delay\n  )\n) +\n  geom_point(\n    aes(color = destination_state), \n    alpha = 0.5\n  ) +\n  labs(\n    title = \"Departure Delay and Arrival Delay\",\n    subtitle = \"Flights from RDU to NC and CA\",\n    x = \"Departure Delay (min)\", \n    y = \"Arrival Delay (min)\",\n    color = \"destination_state\",\n    caption = \"Source: The Annual Data Challenge Expo\"\n  ) +\n  scale_color_colorblind() +\n  theme_minimal()\n\n\n::::"
  },
  {
    "objectID": "closereads/ggplot-story-flights.html#reflection",
    "href": "closereads/ggplot-story-flights.html#reflection",
    "title": "Visualizing RDU flights",
    "section": "Reflection",
    "text": "Reflection\nIn this demonstration, you explored how to create a ggplot using the RDU flights dataset. As we wrap up, take a moment to reflect on and note down what you’ve learned from this example:"
  },
  {
    "objectID": "closereads/data-transformation-flights.html",
    "href": "closereads/data-transformation-flights.html",
    "title": "Flights Data Transformation Example",
    "section": "",
    "text": "Adapted from sample document from https://closeread.dev/gallery/demos/build-up-plots/\nWeather data from: https://www.wunderground.com/history/monthly/us/nc/durham/KRDU/date/2023-11"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#lookup-table",
    "href": "closereads/data-transformation-flights.html#lookup-table",
    "title": "Flights Data Transformation Example",
    "section": "Lookup table",
    "text": "Lookup table\nThe first way of utilizing join we will explore is by employing it as a lookup table. This approach enhances our primary dataset by integrating additional information that expands upon existing data. Using a lookup table is particularly effective for associating concise data entries, such as codes or identifiers, with more descriptive attributes stored in a separate table. We will demonstrate this by joining our flights data with an airline_codes table, where airline identifiers are linked with their full names, transforming our dataset into a more reader-friendly format.\nBefore we start, below is what the airline_codes looks like:\n\nairline_codes\n\n     code\n1      9E\n2      AA\n3      AS\n4      B6\n5      CO\n6      DH\n7      DL\n8      EA\n9      EV\n10     F9\n11     FL\n12     G4\n13     HA\n14     HP\n15     KH\n16 ML (1)\n17     MQ\n18     NK\n19     NW\n20     OH\n21     OO\n22 PA (1)\n23     PI\n24     PS\n25     QX\n26     TW\n27     TZ\n28     UA\n29     US\n30     VX\n31     WN\n32     XE\n33     YV\n34     YX\n                                                                          description\n1                                                                   Endeavor Air Inc.\n2                                                              American Airlines Inc.\n3                                                                Alaska Airlines Inc.\n4                                                                     JetBlue Airways\n5                                                          Continental Air Lines Inc.\n6                                                                    Independence Air\n7                                                                Delta Air Lines Inc.\n8                                                              Eastern Air Lines Inc.\n9                                                  ExpressJet Airlines LLC d/b/a aha!\n10                                                             Frontier Airlines Inc.\n11                                                        AirTran Airways Corporation\n12                                                                      Allegiant Air\n13                                                             Hawaiian Airlines Inc.\n14 America West Airlines Inc. (Merged with US Airways 9/05. Stopped reporting 10/07.)\n15                                                                    Aloha Air Cargo\n16                                                           Midway Airlines Inc. (1)\n17                                                                          Envoy Air\n18                                                                   Spirit Air Lines\n19                                                            Northwest Airlines Inc.\n20                                                                  PSA Airlines Inc.\n21                                                              SkyWest Airlines Inc.\n22                                                     Pan American World Airways (1)\n23                                                             Piedmont Aviation Inc.\n24                                                     Ukraine International Airlines\n25                                                                        Horizon Air\n26                                                            Trans World Airways LLC\n27                                                             ATA Airlines d/b/a ATA\n28                                                              United Air Lines Inc.\n29                                                                    US Airways Inc.\n30                                                                     Virgin America\n31                                                             Southwest Airlines Co.\n32                                                           ExpressJet Airlines Inc.\n33                                                                 Mesa Airlines Inc.\n34                                                                   Republic Airline\n\n\n\nWe use a left_join function from the dplyr package to merge the flights_rdu data frame with the airline_codes lookup table. It includes all records from the ‘left’ table (the flights_rdu table being passed down the pipeline), and the matched records from the ‘right’ table (airline_codes). If there is no match, the result is still a row in the output, but with NULL values in the columns of the ‘right’ table. @cr-join-airlinecode-1\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  )\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: description &lt;chr&gt;\n\n\n\nThis operation is based on matching the reporting_airline column from the flights_rdu dataframe with the code column in the airline_codes table. This type of join ensures that all records from the flights_rdu data frame are preserved, and corresponding airline names are added where available. @cr-join-airlinecode-2\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  )\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: description &lt;chr&gt;\n\n\n\nAfter merging, we use the rename function to change the column name from description to airline_name, enhancing the readability of the dataframe. @cr-join-airlinecode-3\n\n\nflights_rdu_joined_airline &lt;- flights_rdu |&gt;\n  left_join(\n    airline_codes, \n    by = c(\"reporting_airline\" = \"code\")\n  ) |&gt;\n  rename(\n    airline_name = description\n  )\n\nflights_rdu_joined_airline\n\n# A tibble: 368 × 7\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 1 more variable: airline_name &lt;chr&gt;"
  },
  {
    "objectID": "closereads/data-transformation-flights.html#enriching-dataframe-by-joining-another-table",
    "href": "closereads/data-transformation-flights.html#enriching-dataframe-by-joining-another-table",
    "title": "Flights Data Transformation Example",
    "section": "Enriching dataframe by joining another table",
    "text": "Enriching dataframe by joining another table\nFor this part of the analysis, we are merging weather data with our flight dataset to enrich it with environmental conditions that could impact flight schedules and performance. The weather_df data frame contains various weather metrics like temperature, dew point, humidity, wind speed, pressure, and precipitation, recorded on specific dates of November, 2023.\n\nWe use a right_join to combine flights_rdu with weather_data. The join is based on matching flight_date in the flights data with time in the weather data. This method ensures all date is retained and supplemented with corresponding weather conditions and flight data where available.@cr-join-weather-1\n\n\nflights_rdu_joined_weather &lt;- flights_rdu |&gt;\n  right_join(\n    weather_data, \n    by = c(\"flight_date\" = \"time\")\n  ) \nflights_rdu_joined_weather\n\n# A tibble: 368 × 12\n   flight_date dest  reporting_airline destination_state dep_delay arr_delay\n   &lt;date&gt;      &lt;chr&gt; &lt;chr&gt;             &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;\n 1 2023-11-01  CLT   AA                NC                       58        50\n 2 2023-11-01  CLT   AA                NC                       20         8\n 3 2023-11-01  LAX   DL                CA                       16        -6\n 4 2023-11-01  CLT   AA                NC                        0        -3\n 5 2023-11-01  CLT   AA                NC                       -1        -2\n 6 2023-11-01  CLT   AA                NC                       -1       -16\n 7 2023-11-01  LAX   AA                CA                       -2         1\n 8 2023-11-01  SFO   UA                CA                       -2       -21\n 9 2023-11-01  CLT   AA                NC                       -4       -10\n10 2023-11-01  CLT   AA                NC                       -5        -3\n# ℹ 358 more rows\n# ℹ 6 more variables: temperature &lt;dbl&gt;, dew_point &lt;dbl&gt;, humidity &lt;dbl&gt;,\n#   wind_speed &lt;dbl&gt;, pressure &lt;dbl&gt;, precipitation &lt;dbl&gt;"
  }
]