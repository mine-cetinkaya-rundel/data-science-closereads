---
title: RDU Flights Data Transformation
description: This section focuses on preparing the raw flight dataset for analysis through a series of data transformation steps.
order: 2
image: images/cover/data-transformation.png
image-alt: data transformation illustration
format:
  closeread-html:
    cr-section:
      layout: overlay-left
    cr-style:
      narrative-background-color-overlay: transparent
      narrative-background-color-sidebar: transparent
      section-background-color: transparent
      narrative-text-color-overlay: black
knitr:
  opts_chunk: 
    dev.args:
      bg: transparent
comments:
  hypothesis: true
---

# Introduction

This section focuses on preparing the raw flight dataset for analysis through a series of data transformation steps. Using the **dplyr** package from the **tidyverse**, we demonstrate how to filter, select, rename, and mutate variables to clean and structure the data. These operations are essential for shaping the dataset into a form suitable for downstream analysis and visualization.

## Data

This project uses a dataset from the American Statistical Association's Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays.

**Adapted from sample document from <https://closeread.dev/gallery/demos/build-up-plots/>**


```{r}
#| label: setup
#| echo: false
#| output: false
library(tidyverse)
library(arrow)
```


## Recreating the dataframe used in the ggplot story

Starting with a broad dataset of flight records, we refine our data to concentrate on flights departing from Raleigh-Durham International Airport (RDU) to North Carolina and California in November 2023. This process includes filtering, selecting, and renaming key variables to enhance clarity and utility. These steps are executed through a concise series of dplyr functions linked in a pipeline, which transforms the data to the dataset that supports our subsequent analysis in the **ggplot closeread story**.

::::{.cr-section}

We start by loading the `tidyverse` package, which contains the `ggplot2` and `dplyr` packages we need. [@cr-dplyr-1]{highlight="1"}

:::{#cr-dplyr-1}
```{r}
#| echo: true
#| message: false

library(tidyverse)
```
:::

We then load the data frame `flights`. This dataset is now ready for analysis or manipulation in R. This data frame contains data with 59,416 rows and 110 columns. [@cr-dplyr-2]{highlight="2"}

:::{#cr-dplyr-2}
```{r}
#| echo: true
#| message: false
#| eval: false

library(tidyverse)
flights <- read_csv("rdu-flights-23.csv")

flights # display the dataframe
```

```{r}
#| echo: false
#| message: false

library(tidyverse)
flights <- read_csv(here::here("closereads", "data", "rdu-flights-23.csv"))

flights # display the dataframe
```
:::

We use the `filter()` function to retain only those rows in the data frame where `Origin` is "RDU", `DestState` is either "NC" or "CA", and with month equals to 11, as we are only focusing the flights departing from RDU, with destinations in North Carolina or in California, in November 2023. 

We first filter the dataset to only include flights that departed from RDU. This reduces the data to only those flights originating from Raleigh-Durham International Airport. This initial filter reduces the number of rows from 59,416 to 7,937, keeping only flights with `origin == "RDU"`. [@cr-dplyr-3a]{highlight="4-6"}

:::{#cr-dplyr-3a}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    origin == "RDU"
  )

flights_rdu
```
:::

Next, we further narrow the dataset to include only those flights whose destinations are in North Carolina (NC) or California (CA). This ensures we are focusing on flights between RDU and a specific set of states. This reduces the dataset from 7,937 rows to 622. [@cr-dplyr-3b]{highlight="5"}

:::{#cr-dplyr-3b}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    dest_state %in% c("NC", "CA")
  )

flights_rdu
```
:::

Finally, we filter the dataset by month, keeping only those flights that took place in November (`month == 11`). This restricts the dataset to a single month's worth of data for focused analysis. This brings the final row count down from 622 to 368, giving us the subset of interest: RDU departures to NC or CA in November 2023. [@cr-dplyr-3c]{highlight="5"}

:::{#cr-dplyr-3c}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights_rdu |>
  filter(
    month == 11
  )

flights_rdu
```
:::

While we demonstrated the filtering process step by step to better understand the impact of each condition, itâ€™s important to note that in practice, we typically apply all three filters in a single `filter()` call. [@cr-dplyr-3]{highlight="4-8"}

:::{#cr-dplyr-3}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  )

flights_rdu
```
:::

We want to select the variables that are used in the data visualization: `dep_delay`, `arr_delay`, `dest_state`, and other variables that help us identify the flights. After selecting the columns, the number of rows does not change, but the number of columns is reduced from 110 to 6. [@cr-dplyr-4]{highlight="9-16"}

:::{#cr-dplyr-4}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  )

flights_rdu
```
:::

We can rename the variable `dest_state` to "destination_state" for clarity. Looking at the last column of the displayed tibble, we see that the variable is successfully renamed. [@cr-dplyr-5]{highlight="17-19"}

:::{#cr-dplyr-5}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  ) |>
  rename(
    destination_state = dest_state
  )

flights_rdu
```
:::

The main block of code is referred as a pipeline or chain. Each line starts with a function and ends with a pipe operator, `|>`. The pipe operator in R is used to pass one expression as the input to the next expression, creating a sequence of operations that's easy to read and manage.  [@cr-dplyr]{highlight="3-19"}

:::{#cr-dplyr}
```{r}
#| echo: true
#| message: false

library(tidyverse)

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  ) |>
  rename(
    destination_state = dest_state
  )

flights_rdu
```
:::
::::

## Other functions: `arrange`, `relocate`

In the following section, we build on top of the current dataset and explore the utilization of two additional **dplyr** functions: `arrange` and `relocate.` `arrange` is used to sort data frames based on one or more columns, providing a logical sequence that can facilitate more insightful analysis. On the other hand, `relocate` is employed to adjust the order of columns within the data frame, enhancing readability and accessibility when navigating through the data.

::::{.cr-section}

The `relocate` function is being used here to adjust the position of the `destination_state` column within the dataframe. By specifying `.before = dep_delay`, the function moves the `destination_state` column to a position immediately before the `dep_delay` column. [@cr-additional-fn-1]{highlight="20-22"}

:::{#cr-additional-fn-1}
```{r}
#| echo: true
#| message: false

# add arrange and relocate at the end

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  ) |>
  rename(
    destination_state = dest_state
  ) |>
  relocate(
    destination_state, .before = dep_delay
  )

flights_rdu
```
:::

The `arrange` function is then utilized to sort the dataframe based on the `dep_delay` column in descending order. By using `desc(dep_delay)`, it ensures that the entries with the longest departure delays are listed at the top of the data frame. [@cr-additional-fn-2]{highlight="23-25"}

:::{#cr-additional-fn-2}
```{r}
#| echo: true
#| message: false

# add arrange and relocate at the end

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  ) |>
  rename(
    destination_state = dest_state
  ) |>
  relocate(
    destination_state, .before = dep_delay
  ) |>
  arrange(
    desc(dep_delay)
  )

flights_rdu
```
:::

Note that we can use the `arrange` function to sort the dataframe by more than one variable, allowing for a multi-level sort order. In the example below, we sort the data frame primarily by `flight_date` and secondarily by `dep_delay`, descending. This sorting order helps to organize the data chronologically while also categorizing flights by departure delay within each date, providing a structured view of flight operations over time. [@cr-additional-fn-3]{highlight="23-25"}

:::{#cr-additional-fn-3}
```{r}
#| echo: true
#| message: false

# add arrange and relocate at the end

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  ) |>
  select(
    flight_date,
    dest,
    reporting_airline,
    dep_delay,
    arr_delay,
    dest_state
  ) |>
  rename(
    destination_state = dest_state
  ) |>
  relocate(
    destination_state, .before = dep_delay
  ) |>
  arrange(
    flight_date, desc(dep_delay)
  )

flights_rdu
```
:::
::::

## One more function: `mutate`

We now explore the use of the `mutate()` function from **dplyr**, which is used to create or transform variables in a data frame. We'll demonstrate two common use cases:

* deriving new values using functions (e.g., extracting the day of the week), and

* creating categorical labels using logical conditions (e.g., classifying flight delays).

::::{.cr-section}

Building on top of the dataset we obtained from preivous steps, we first use `mutate()` to create a new column, `day_of_week`, derived from `flight_date`. The `wday()` function from the `lubridate` package returns the day of the week as a factor, with labels like "Mon", "Tue", etc. [@cr-additional-fn-4]{highlight="5"}

:::{#cr-additional-fn-4}
```{r}
#| echo: true
#| message: false

library(lubridate)

flights_rdu <- flights_rdu |>
  mutate(
    day_of_week = wday(flight_date, label = TRUE)
  )

flights_rdu
```
:::

We can also use `mutate()` to add a variable that classifies departure delays using `ifelse()`. In this case, we label flights as "On time or Early" if dep_delay <= 0, and "Delayed" otherwise. [@cr-additional-fn-5]{highlight="3"}

:::{#cr-additional-fn-5}
```{r}
#| echo: true
#| message: false

flights_rdu <- flights_rdu |>
  mutate(
    delay_status = ifelse(dep_delay <= 0, "On time or Early", "Delayed")
  )

flights_rdu
```
:::

:::{focus-on="cr-additional-fn-6" highlight="2-8"}
For more complex logic, `case_when()` is useful. Here, we categorize departure delays into multiple cases:

* "Early" for negative delays,

* "On Time" for 0-minute delay,

* "Minor Delay" for delays up to 15 minutes, and

* "Major Delay" for delays greater than 15 minutes.
:::

:::{#cr-additional-fn-6}
```{r}
#| echo: true
#| message: false

flights_rdu <- flights_rdu |>
  mutate(
    delay_category = case_when(
      dep_delay < 0 ~ "Early",
      dep_delay == 0 ~ "On Time",
      dep_delay <= 15 ~ "Minor Delay",
      dep_delay > 15 ~ "Major Delay"
    )
  )

flights_rdu
```
:::

Again, we typically apply all three filters in a single `mutate()` call.[@cr-additional-fn-7]{highlight="2-10"}

:::{#cr-additional-fn-7}
```{r}
#| echo: true
#| message: false

flights_rdu <- flights_rdu |>
  mutate(
    day_of_week = wday(flight_date, label = TRUE),
    delay_status = ifelse(dep_delay <= 0, "On time or Early", "Delayed"),
    delay_category = case_when(
      dep_delay < 0 ~ "Early",
      dep_delay == 0 ~ "On Time",
      dep_delay <= 15 ~ "Minor Delay",
      dep_delay > 15 ~ "Major Delay"
    )
  )

flights_rdu
```
:::
::::

# Reflection
Along the way, we applied a variety of data transformation techniques using **dplyr**, such as `filter()`, `mutate()`, `select()`, and `arrange()`, to shape the dataset into a form suitable for further analysis. We also used functions like `case_when()` and `wday()` to create new derived variables that added context to the dataset. As we wrap up, take a moment to reflect on and note down what you've learned from this example:

<input type="text" id="inputText" name="inputText" placeholder="Type something..." style="width: 50%; height: 200px; font-size: 20px; padding: 10px; border: 2px solid #000000; border-radius: 4px;">