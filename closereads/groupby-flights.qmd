---
title: Group by
description: In this section, we focus on summarizing flight data to uncover broader patterns and trends.
order: 4
format:
  closeread-html:
    cr-section:
      layout: overlay-left
    cr-style:
      narrative-background-color-overlay: transparent
      narrative-background-color-sidebar: transparent
      section-background-color: transparent
      narrative-text-color-overlay: black
knitr:
  opts_chunk: 
    dev.args:
      bg: transparent
comments:
  hypothesis: true
---

# Introduction

In this section, we focus on summarizing flight data to uncover broader patterns and trends. The goal here is to aggregate the data: grouping flights by meaningful categories such as day of the week, airline, or time of day. This allows us to answer higher-level questions like *Which days are busiest?, When do delays happen most often?*, or *What are the main reasons for cancellations over time?* By grouping the data and calculating summary statistics, we can efficiently condense large datasets into interpretable insight.

## Data

This project uses data from the American Statistical Association's Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California.

```{r}
#| echo: false
#| message: false
library(tidyverse)
library(janitor)
library(knitr)

flights <- read_csv(here::here("closereads", "data", "rdu-flights-23.csv"))

flights_rdu <- flights |>
  filter(
    origin == "RDU",
    dest_state %in% c("NC", "CA"),
    month == 11
  )
```

## Examples

::::{.cr-section}

First, let's look at the dataset that we will be using for the analysis.[@cr-grouby-0]{highlight="1"}

:::{#cr-grouby-0}
```{r}
flights_rdu
```
:::

We begin with a simple example: counting the number of flights on each day of the week. To do this, we use the `group_by()` function to group the data by the `day_of_week` variable. It’s important to note that when `group_by()` is used on its own, the output looks identical to the original data frame, with no visible change occurs. That’s because group_by() doesn’t modify the data directly. This grouping only becomes meaningful when combined with a function like `summarize()`, which uses that metadata to compute statistics for each group.[@cr-groupby-1a]{highlight="3"}

:::{#cr-groupby-1a}
```{r}
flights_rdu |>
  group_by(day_of_week)
```
:::

The `group_by()` function is followed by `summarize()` to count the number of records within each group. In this example, `n()` is used to count the number of rows in each group, giving us a frequency count of flights by day of the week.[@cr-groupby-1b]{highlight="3"}

:::{#cr-groupby-1b}
```{r}
flights |>
  group_by(day_of_week) |>
  summarize(flight_count = n())
```
:::

In our next example, we group data by month and cancellation code to see trends over the year in terms of why flights are cancelled, showing problematic months or operational challenges during certain periods. By applying `group_by(month, cancellation_code)`, we create grouped combinations of each month and cancellation reason.[@cr-groupby-2a]{highlight="2"}

:::{#cr-groupby-2a}
```{r}
flights |>
  group_by(month, cancellation_code)
```
:::

This enables us to count how many cancellations occurred for each reason in each month using `summarize()` and `n()`. After summarization, we use `.groups = "drop"` to remove the grouping structure, so the output is returned as a regular, ungrouped dataframe. [@cr-groupby-2b]{highlight="3"}

:::{#cr-groupby-2b}
```{r}
flights |>
  group_by(month, cancellation_code) |>
  summarize(cancellation = n(), .groups = "drop")
```
:::


Next, we analyze how flight performance varies across different times of the day, grouped by airline. We begin by using `mutate()` along with `case_when()` to create a new categorical variable, `time_of_day`, derived from `crs_dep_time` (the scheduled departure time). Each flight is categorized into one of four time blocks. [@cr-groupby-3a]{highlight="2-9"}

:::{#cr-groupby-3a}
```{r}
flights |>
  mutate(
    time_of_day = case_when(
      crs_dep_time >= 0 & crs_dep_time < 600 ~ "Early Morning",
      crs_dep_time >= 600 & crs_dep_time < 1200 ~ "Morning",
      crs_dep_time >= 1200 & crs_dep_time < 1800 ~ "Afternoon",
      crs_dep_time >= 1800 & crs_dep_time <= 2359 ~ "Evening",
    )
  )
```
:::

After defining the time periods, we apply `group_by()` with both `reporting_airline` and our newly derived variable `time_of_day`.[@cr-groupby-3b]{highlight=10}
:::{#cr-groupby-3b}
```{r}
flights |>
  mutate(
    time_of_day = case_when(
      crs_dep_time >= 0 & crs_dep_time < 600 ~ "Early Morning",
      crs_dep_time >= 600 & crs_dep_time < 1200 ~ "Morning",
      crs_dep_time >= 1200 & crs_dep_time < 1800 ~ "Afternoon",
      crs_dep_time >= 1800 & crs_dep_time <= 2359 ~ "Evening",
    )
  ) |>
  group_by(reporting_airline, time_of_day)
```
:::

We can then use `summarize()` to calculate two key metrics: `average_delay`: The mean departure delay within each group; `on_time_rate`: The proportion of flights that departed on time or early. We also use `.groups = "drop"` to return the result as an ungrouped data frame.

:::{#cr-groupby-3c}
```{r}
flights |>
  mutate(
    time_of_day = case_when(
      crs_dep_time >= 0 & crs_dep_time < 600 ~ "Early Morning",
      crs_dep_time >= 600 & crs_dep_time < 1200 ~ "Morning",
      crs_dep_time >= 1200 & crs_dep_time < 1800 ~ "Afternoon",
      crs_dep_time >= 1800 & crs_dep_time <= 2359 ~ "Evening",
    )
  ) |>
  group_by(reporting_airline, time_of_day) |>
  summarize(
    average_delay = mean(dep_delay, na.rm = TRUE),
    on_time_rate = mean(dep_delay <= 0, na.rm = TRUE),
    .groups = "drop"
  )
```
:::

::::

# Summary
In this section, we explored how to use `group_by()` to gain grouped insights. By pairing `group_by()` with `summarize()`, we were able to condense individual flight records into summaries, such as flight counts by day, cancellation reasons by month, and delay patterns across different times of day.

We also highlighted the power of `mutate()` in grouped workflows. Before summarizing, `mutate()` allowed us to define new variables like `time_of_day`, giving context to the data and enabling more meaningful groupings.

As we wrap up, take a moment to reflect on and note down what you've learned from this example:

<input type="text" id="inputText" name="inputText" placeholder="Type something..." style="width: 50%; height: 200px; font-size: 20px; padding: 10px; border: 2px solid #000000; border-radius: 4px;">