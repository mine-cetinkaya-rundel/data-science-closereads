---
title: Visualizing RDU flights
description: This section focuses on exploring flight delay patterns using the ggplot2 visualization system
order: 1
format:
  closeread-html:
    cr-section:
      layout: overlay-left
    cr-style:
      narrative-background-color-overlay: transparent
      narrative-background-color-sidebar: transparent
      section-background-color: transparent
      narrative-text-color-overlay: black
knitr:
  opts_chunk: 
    dev.args:
      bg: transparent
comments:
  hypothesis: true
---

<!-- Data Dictionary: <https://www.transtats.bts.gov/Fields.asp?gnoyr_VQ=FGJ> -->

# Introduction

This section focuses on exploring flight delay patterns using the **ggplot2** visualization system. You'll learn how to visualize data to uncover patterns in departure and arrival delays. By the end of this tutorial, you should be able to craft visual narratives that are informative and visually appealing, providing you with a fundamental skill set critical in the field of data science.


## Data

This project uses data from the American Statistical Association's Data Expo, which provides comprehensive flight information covering various aspects of flight operations. The dataset contains data about flights across the United States, recording details such as departure times, scheduled and actual arrival times, flight durations, distances, and reasons for delays. The dataset used in this story consists of flights departing from Raleigh-Durham International Airport (RDU) in November 2023, headed to destinations in North Carolina and California. It includes key variables such as departure and arrival delays, destination airport codes, airline names, and dates of travel. Prior to visualization, the dataset was filtered and transformed to focus on a clean and meaningful subset of flights, enabling a more focused and compelling narrative.

The packages we used in this tutorial for plotting include **ggplot2** and **ggthemes**. 

```{r}
#| label: load-packages
#| message: false
library(tidyverse)
library(ggthemes)
```

In our visualization, we explore the relationship between departure delays (`dep_delay`) and arrival delays (`arr_delay`) for flights from Raleigh-Durham International Airport (RDU) to destinations in North Carolina and California. The graph you will learn to create visually compares the length of departure delays to arrival delays.

```{r}
#| label: data-prep
#| echo: false
flights <- read_csv(here::here("closereads", "data", "rdu-flights-23.csv"))

flights_rdu <- flights |>
  filter(
    month == 11, # November
    dest_state %in% c("NC", "CA") # NC and CA
  ) |>
  select(flight_date, dest_city_name, dep_delay, arr_delay, dest_state) |>
  rename(destination_state = dest_state)
```

## Plot

We'll start by loading our data, then move on to constructing our plot using ggplot2. This will involve mapping our variables to the appropriate axes, customizing the aesthetic elements of our plot, and refining our visual with tools designed to enhance clarity and impact. The resultant plot is provided below, along with a full narrative on how it is constructed.

Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. Change the theme of the plot using `theme_minimal()`.

```{r}
#| label: target-plot
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```

## How to read the scrolly-telling story

Before we start, let's look at how to read the scrolly-telling story. As you progress through the narrative, you'll notice that the code that creates the exact plot displayed is included as part of the narrative column on the left. On the right, below the plot, we include the code that creates the resultant visualization, with the code necessary to achieve the described step highlighted. For instance, in the current step where we discuss adding titles, subtitles, and axis labels, the corresponding labs() function in the code chunk is highlighted to indicate exactly where and how these elements are integrated into the plot.

![Scrolly-telling demonstration](images/read-ggplot.png)


::::{.cr-section}
:::{focus-on="cr-plot-1" highlight="2"}
**Start with the `flights_rdu` data frame.**
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  data = flights_rdu, 
)
```
:::
:::{#cr-plot-1}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  data = flights_rdu, 
)
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-2" highlight="3,4,6"}
Start with the `flights_rdu` data frame. **Map `dep_delay` to the x-axis**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  data = flights_rdu, 
  mapping = aes(x = dep_delay)
)
```
:::
:::{#cr-plot-2}
```{r}
#| echo: false
#| message: false
#| eval: true

ggplot(
  data = flights_rdu, 
  mapping = aes(x = dep_delay)
)
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
:::{focus-on="cr-plot-3" highlight="3-6"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and **map `arr_delay` to the y-axis**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  data = flights_rdu, 
  mapping = aes(
    x = dep_delay,
    y = arr_delay
  )
)
```
Typically, when using `ggplot()`, the arguments `data` and `mapping` are often omitted for brevity and readability, assuming the context is clear. Instead, you would see the function call simplified as follows:
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay,
    y = arr_delay
  )
)
```
:::
:::{#cr-plot-3}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  data = flights_rdu, 
  mapping = aes(
    x = dep_delay,
    y = arr_delay
  )
)
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-4" highlight="8,11"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. **Represent each observation with a point**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point()
```
:::
:::{#cr-plot-4}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point()
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-5" highlight="9"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and **map species to the color of each point**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state)
  )
```
:::
:::{#cr-plot-5}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state)
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
:::{focus-on="cr-plot-6" highlight="10"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. **Adjust the alpha parameter to 0.5 to make the points slightly transparent**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  )
```
:::
:::{#cr-plot-6}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-7" highlight="13"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. **Title the plot "Departure Delay and Arrival Delay"**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay"
  )
```
:::
:::{#cr-plot-7}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay"
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
:::{focus-on="cr-plot-8" highlight="14"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", **add the subtitle "Flights from RDU to NC and CA"**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA"
  )
```
:::
:::{#cr-plot-8}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA"
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-9" highlight="15-16"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", **label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)"
  )
```
:::

:::{#cr-plot-9}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)"
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-10" highlight="17"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively, **label the legend “destination_state”**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state"
  )
```
:::

:::{#cr-plot-10}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state"
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{focus-on="cr-plot-11" highlight="18"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively, label the legend “destination_state”, and **add a caption for the data source**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  )
```
:::
:::{#cr-plot-11}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  )
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
:::{focus-on="cr-plot-12" highlight="20"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively, label the legend “destination_state”, and add a caption for the data source. **Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind()
```
:::
:::{#cr-plot-12}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind()
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
:::{focus-on="cr-plot-13" highlight="21"}
Start with the `flights_rdu` data frame. Map `dep_delay` to the x-axis and map `arr_delay` to the y-axis. Represent each observation with a point and map species to the color of each point. Adjust the alpha parameter to 0.5 to make the points slightly transparent. Next, we add titles, subtitles, and axis labels. Title the plot "Departure Delay and Arrival Delay", add the subtitle "Flights from RDU to NC and CA", label the x and y axes as "Departure Delay (min)" and "Arrival Delay (min)", respectively, label the legend “destination_state”, and add a caption for the data source. Finally, use a discrete color scale that is designed to be perceived by viewers with common forms of color blindness. **Change the theme of the plot using `theme_minimal()`**.
```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::

:::{#cr-plot-13}
```{r}
#| echo: false
#| message: false
#| eval: true
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```

```{r}
#| echo: true
#| message: false
#| eval: false
ggplot(
  flights_rdu, 
  aes(
    x = dep_delay, 
    y = arr_delay
  )
) +
  geom_point(
    aes(color = destination_state), 
    alpha = 0.5
  ) +
  labs(
    title = "Departure Delay and Arrival Delay",
    subtitle = "Flights from RDU to NC and CA",
    x = "Departure Delay (min)", 
    y = "Arrival Delay (min)",
    color = "destination_state",
    caption = "Source: The Annual Data Challenge Expo"
  ) +
  scale_color_colorblind() +
  theme_minimal()
```
:::
::::

# Reflection

Through this ggplot-based data story, we've explored a structured approach to building data visualizations using **ggplot2** in R. Starting from basic scatterplots and bar charts, we incrementally built visualizations by layering components such as geometries, scales, themes, and labels. We incorporated **ggthemes** to enhance the look of the plot. As we wrap up, take a moment to reflect on and note down what you've learned from this example:

<input type="text" id="inputText" name="inputText" placeholder="Type something..." style="width: 50%; height: 200px; font-size: 20px; padding: 10px; border: 2px solid #000000; border-radius: 4px;">
